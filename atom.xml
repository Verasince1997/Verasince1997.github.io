<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jueluo</title>
  
  
  <link href="https://verasince1997.github.io/atom.xml" rel="self"/>
  
  <link href="https://verasince1997.github.io/"/>
  <updated>2024-09-15T08:11:40.632Z</updated>
  <id>https://verasince1997.github.io/</id>
  
  <author>
    <name>jueluo 深圳之恋</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>道德经从入门到精通04</title>
    <link href="https://verasince1997.github.io/2024/09/09/%E9%81%93%E5%BE%B7%E7%BB%8F/%E9%81%93%E5%BE%B7%E7%BB%8F%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A04/"/>
    <id>https://verasince1997.github.io/2024/09/09/%E9%81%93%E5%BE%B7%E7%BB%8F/%E9%81%93%E5%BE%B7%E7%BB%8F%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A04/</id>
    <published>2024-09-09T15:10:41.416Z</published>
    <updated>2024-09-15T08:11:40.632Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不上贤，使民不争。不贵难得之货，使民不为盗。不见(xiàn)可欲，使民不乱。</p><p>是以圣人之治也，虚其心，实其腹，弱其志，强其骨。恒使民无知无欲也，使夫智不敢。弗为而已，则无不治矣。</p></blockquote><p><code>不上贤，使民不争。不贵难得之货，使民不为盗。不见(xiàn)可欲，使民不乱。</code></p><p>不拔高贤人的地位，使民众不互相争斗。不看重难得的财货，使民众不偷不盗。不展现容易诱发欲望的东西，使民众不作乱。</p><p><code>是以圣人之治也，虚其心，实其腹，弱其志，强其骨。</code></p><p>心和眼睛代表的都是欲望，欲望永远是无穷的。腹代表生活所需的根本的东西，肚子吃饱了就不会有更多的欲望了。你喜欢吃牛肉，这一顿给你一吨，你吃完一碗就肚子胀了不想吃了，但钱给你再多你都能接受。</p><p>“志”就是心的方向，心里向往的方向。“弱其志，强其骨”跟“虚其心，实其腹”是一样的，就是降低大家的欲望，然后使最基本的生活需要得到满足。怎么才能做到这点呢？领导者通过把自己的欲望放低，感化被领导者，被领导者就会把欲望放低，去把该做的事做好。</p><p>骨”是撑起生命的骨干性的东西，就是生活最基本的条件，让你强壮，让你充实。那么，在这种情况下，生活条件都满足了，你的欲望才可能慢慢消减下来。</p><p>身体变热有两种可能：一种可能是外邪来了，身体开始越来越热，发烧、咽喉红肿，这个热是多余的。比如，阴阳原来各有一百份，这时候外邪来了，使阳多出五十份邪热来，阴却不变，就显得热多余了。这时候中医的方法是清热，要减去五十份的阳。另外一种情况是，阴阳都是一百份，阴虚了，变成五十份了；阳跟阴比就多出来五十份。因为阴不足以配阳了，这个多出来的阳就会变成多余的热，就相对显得热了。这时候中医的方法是滋阴，要补五十份的阴。补上以后，人就不会显出偏寒或者偏热了。阴好比是老子讲的物质基础，吃饱饭，有房子住，有衣服穿等等；阳相当于人的欲望。老子一方面滋阴，把物质基础补足；另一方面又清热，去掉欲望——这在中医里叫滋阴清热。所以老子是讲让你物质基础变得富足，然后才能去掉欲望。甘其食，美其服，乐其俗，安其居；有房子住、有饱饭吃、有东西用、有衣服穿等等这些可称作阴。阳相当于人的欲望，老子一方面儿滋阴，把物质基础补足。另外一方面又给你去掉欲望清热。</p><p><code>恒使民无知无欲也，使夫智不敢。弗为而已，则无不治矣。</code></p><p>使民无知无欲也。老子的言外之音是让老百姓的物质丰盛，然后通过这种方式去掉欲望，那么下一句是夫知者不敢扶为而已。是让领导者你自己去做到，然后用你的行为去影响百姓，让他们不会忤逆，违逆你的这种状态，而是跟你达到一致的状态。这样则无不治也。</p><p>“勇”字在古代有两种写法：一种是“勇”；还有一种是“恿”，指气在体内流通的管道。我们的气在体内走，体内的气充足了以后，这个人就会有力气，这种状态叫“勇”。所以“勇”是形体的丰盛，就是气足了，人就有劲。</p><p>“敢”是在低的位置去触动高的位置，也就是说，叫以卑犯上什么呢，就是地位低的人，有勇气去动高的人，敢是一种胆量。</p><p>领导者难道要用强力压制，吓唬那些为了获取虚名，为了满足自己的欲望使用各种奇技淫巧的人不敢这样做吗？难道是用武力让民没有胆量去逆着意愿吗？领导者清空自己，不上贤，不标榜自己多么高明，不贵难得之货，抬高它的价格，不表现出自己的欲望。把自己欲望放下，生活平淡，然后认真地踏踏实实的去做自己该做的事儿，你带领的员工也一定会这样的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;不上贤，使民不争。不贵难得之货，使民不为盗。不见(xiàn)可欲，使民不乱。&lt;/p&gt;
&lt;p&gt;是以圣人之治也，虚其心，实其腹，弱其志，强其骨。恒使民无知无欲也，使夫智不敢。弗为而已，则无不治矣。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;</summary>
      
    
    
    
    <category term="书籍" scheme="https://verasince1997.github.io/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
    <category term="道德经" scheme="https://verasince1997.github.io/tags/%E9%81%93%E5%BE%B7%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>道德经从入门到精通03</title>
    <link href="https://verasince1997.github.io/2024/09/07/%E9%81%93%E5%BE%B7%E7%BB%8F/%E9%81%93%E5%BE%B7%E7%BB%8F%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A03/"/>
    <id>https://verasince1997.github.io/2024/09/07/%E9%81%93%E5%BE%B7%E7%BB%8F/%E9%81%93%E5%BE%B7%E7%BB%8F%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A03/</id>
    <published>2024-09-07T09:35:33.914Z</published>
    <updated>2024-09-09T15:08:31.661Z</updated>
    
    <content type="html"><![CDATA[<p>《道经帛书版》46章02</p><blockquote><p>天下皆知美、为美，恶已。皆知善，訾(zǐ)不善矣。</p><p>有，无之相生也。难，易之相成也。长，短之相形也。高，下之相盈也。音，声之相和也。先，后之相随，恒也。</p><p>是以圣人居无为之事，行不言之教。万物作而弗始也，为而弗持也，成功而弗居也。夫唯弗居，是以弗去。</p></blockquote><p><code>天下皆知美、为美，恶已。皆知善，訾(zǐ)不善矣。</code></p><p>大家都说一个事物是美的，真的美吗？美不是固定的一个标准。胖美吗？骨感美吗？蛾眉美吗？而且说美，那不美出现了。随着时间不同，它会变化，有的时候呢，美好和丑恶还会互相转化，天下都说的美好，明天可能就不美好。古人最有名的一个例子，塞翁失马，旋转不停变换，玄啊。</p><p>天下所有人都认为就这事铁定就是善的时候，这事本身可能就不是善的。今天认为是好的，明天可能就不认为好了，今天认为是对的，明天可能就认为错了。那么这是什么呢？就是名可名也，非恒名也。我们但凡给它固定下来的标签儿，形名符号都是人为加上去的，带着我们的标准，角度一换，全部都换掉。固定的标签不可能是恒定的，领导者不要推行单一标准。</p><p><code>有，无之相生也。难，易之相成也。</code></p><p>有生无，无生有。有和无是互相生的。有有才有无，有无才有有。没有无哪儿来的有啊，比如说这块地完全空白，种上树才能变成有。如果它已经是有，树都种满了，你还种什么树啊。有也会生无，我们眼见着多少有东西，当它如此盛大的时候，觉得它会永恒的存在，可是转眼之间它就消失了。</p><p>当你身体什么问题都没有的时候，你感觉到健康了吗？没感觉到对吧，因为你运行正常，都不会想到身体哪个部分有问题，这是大家都是有的状态，你也显不出来有。什么时候发现自己有健康？到医院去看看，那里边儿做手术的，各种切除的，这个胃不好了，切掉多少，肺坏了，切掉多少。当你看到这些人的时候，会突然意识到自己有什么，也就是有是当看到无的时候才显现出。</p><p>难和易也相互转变，当量变到质变时，易就会转为难。所以老子告诉大家不要执着于获得名相，这些名相是在一定程度下一定条件下出现的。条件一变，这个标签就变了。无和有之间是再来回互相生的。我们人生只不过是要在有和无之间寻找平衡，在有的时候要有意的无，以获得有；有时候要有意的去有，然后进入无的状态，自己要学会做减法。</p><p>比如有人在家找工作，没有生活来源，是无的状态。正因为无，所以有时间不断的在家写，写东西，在哪儿找出版社呢？这是儿简直难于上青天。每天写5000字，一下写了上百万字，写完了以后，大家看到以后觉得有收益，所以书出版了，看的人越来越多，出版社自己开始来找，甚至大家都争起来了。这个时候联系出版社反而变得非常容易。大家请他不断地去跟大家做辅导，生活变得有益起来，这时候生活就有了。当有了以后，你觉得真的全都有了吗？又会变化，因为太忙了，每天要不断的写东西，要给大家去做讲座、讲课、开各种会，那么慢慢变得没有时间去陪伴家人，陪父母的时间就变得非常少了，丧失自己的私人生活空间，又变成无了。<span id="more"></span></p><p>​<code>长，短之相形也。高，下之相盈也。音，声之相和也。先，后之相随，恒也。</code></p><p>长短、高下是相对比较出现的。条件一变，参照物一变，评价就变了。</p><p>音、声、乐所描述的东西不同。音是指单个的声响；声是几个音组成在一起，有高低的时候才叫声，音是单个音节的声，声是组合起来的音；乐指把这个声再合起来的音符。<br>音声之相合，什么意思呢？每一个事物都是因为其他事物的支撑而存在的，你不可能独立存在。比如说高下有了高才显出这个下，有了这个下，你才显得这高。如果没有参照物，您说何谈高呢，您说这些楼立在那儿，这楼高还是低啊？没法评价，因为没有参照物，拿自己来比这楼是高的，拿泰山比，这楼是低的。所以两者是相成的。先，后之相随，恒也。有比较才有先后。先和后总是相比较出现的，这种状态是永恒的，</p><p>老子讲的有无、难易、长短，高下、先后，都是一个是另外一个的参照物，那么怎么会有一个铁定不变的标准呢？</p><p>​<code>是以圣人居无为之事，行不言之教。万物作而弗始也，为而弗持也，成功而弗居也。夫唯弗居，是以弗去。</code></p><p>无为是道德经的核心，无为被历朝历代解得模糊不堪，各家有各家讲法，到底谁对谁错？我们去掉形名之分。不要说谁对谁错，只要能够启发到其他人了，那么这个就是有意义的。</p><p>如果无为而治是尽量不去干预它，让它自己去运行。这种说法你接受吗？我不接受。那么无为到底什么意思？解开道德经的钥匙在哪儿？老子道德经里面的核心是效仿天之道来去制定圣人之道。</p><p>春夏万物树木繁茂，秋冬树叶凋落，春天又开始发芽。天地万物生养得这么好，但是道不说这是自己的功劳，不视以为功，它隐身于背后，我们看不到这个道在哪儿，道隐身于背后，无言无形，让万物去运作。成功而弗居也，万物已经长好繁茂了，但它不居功自傲，不恃以为功，不居功自傲，抬高自己位置。正因为它不居功自傲，它放低自己，隐形于背后，为大家去做事儿，结果大家反而离不开它。</p><p>无为是一个领导者不要为自己的名誉、地位和金钱去刻意作为，无为是放下自己的欲望，清空自己，尽量不要有名利之心，忘掉形名之分，但要对众生有为。<br>行</p><p>不言之教是什么意思？天之道让大地万物运作，但没有指指点点，它只制定规则，然后万物按照规则去运作。不符合规则就惩罚，比冬天开花了，它惩罚让你枯萎，不去过分干预。</p><p>老子原来是讲天之道，天之道为万物作为，它生养万物，万物作而弗始也，它从一开始就努力把自己掩藏的背后，你都不知道它什么时候开始的。居是放到什么位置，它不把自己认为是主宰，所以大家离不开它。放下自己为大家做事儿，不要想回报，反而最后会更幸福。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;《道经帛书版》46章02&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;天下皆知美、为美，恶已。皆知善，訾(zǐ)不善矣。&lt;/p&gt;
&lt;p&gt;有，无之相生也。难，易之相成也。长，短之相形也。高，下之相盈也。音，声之相和也。先，后之相随，恒也。&lt;/p&gt;
&lt;p&gt;是以圣人居无为之事，行不言之教。万物作而弗始也，为而弗持也，成功而弗居也。夫唯弗居，是以弗去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;天下皆知美、为美，恶已。皆知善，訾(zǐ)不善矣。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;大家都说一个事物是美的，真的美吗？美不是固定的一个标准。胖美吗？骨感美吗？蛾眉美吗？而且说美，那不美出现了。随着时间不同，它会变化，有的时候呢，美好和丑恶还会互相转化，天下都说的美好，明天可能就不美好。古人最有名的一个例子，塞翁失马，旋转不停变换，玄啊。&lt;/p&gt;
&lt;p&gt;天下所有人都认为就这事铁定就是善的时候，这事本身可能就不是善的。今天认为是好的，明天可能就不认为好了，今天认为是对的，明天可能就认为错了。那么这是什么呢？就是名可名也，非恒名也。我们但凡给它固定下来的标签儿，形名符号都是人为加上去的，带着我们的标准，角度一换，全部都换掉。固定的标签不可能是恒定的，领导者不要推行单一标准。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;有，无之相生也。难，易之相成也。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;有生无，无生有。有和无是互相生的。有有才有无，有无才有有。没有无哪儿来的有啊，比如说这块地完全空白，种上树才能变成有。如果它已经是有，树都种满了，你还种什么树啊。有也会生无，我们眼见着多少有东西，当它如此盛大的时候，觉得它会永恒的存在，可是转眼之间它就消失了。&lt;/p&gt;
&lt;p&gt;当你身体什么问题都没有的时候，你感觉到健康了吗？没感觉到对吧，因为你运行正常，都不会想到身体哪个部分有问题，这是大家都是有的状态，你也显不出来有。什么时候发现自己有健康？到医院去看看，那里边儿做手术的，各种切除的，这个胃不好了，切掉多少，肺坏了，切掉多少。当你看到这些人的时候，会突然意识到自己有什么，也就是有是当看到无的时候才显现出。&lt;/p&gt;
&lt;p&gt;难和易也相互转变，当量变到质变时，易就会转为难。所以老子告诉大家不要执着于获得名相，这些名相是在一定程度下一定条件下出现的。条件一变，这个标签就变了。无和有之间是再来回互相生的。我们人生只不过是要在有和无之间寻找平衡，在有的时候要有意的无，以获得有；有时候要有意的去有，然后进入无的状态，自己要学会做减法。&lt;/p&gt;
&lt;p&gt;比如有人在家找工作，没有生活来源，是无的状态。正因为无，所以有时间不断的在家写，写东西，在哪儿找出版社呢？这是儿简直难于上青天。每天写5000字，一下写了上百万字，写完了以后，大家看到以后觉得有收益，所以书出版了，看的人越来越多，出版社自己开始来找，甚至大家都争起来了。这个时候联系出版社反而变得非常容易。大家请他不断地去跟大家做辅导，生活变得有益起来，这时候生活就有了。当有了以后，你觉得真的全都有了吗？又会变化，因为太忙了，每天要不断的写东西，要给大家去做讲座、讲课、开各种会，那么慢慢变得没有时间去陪伴家人，陪父母的时间就变得非常少了，丧失自己的私人生活空间，又变成无了。&lt;/p&gt;</summary>
    
    
    
    <category term="书籍" scheme="https://verasince1997.github.io/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
    <category term="道德经" scheme="https://verasince1997.github.io/tags/%E9%81%93%E5%BE%B7%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>道德经从入门到精通02</title>
    <link href="https://verasince1997.github.io/2024/09/03/%E9%81%93%E5%BE%B7%E7%BB%8F/%E9%81%93%E5%BE%B7%E7%BB%8F%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A02/"/>
    <id>https://verasince1997.github.io/2024/09/03/%E9%81%93%E5%BE%B7%E7%BB%8F/%E9%81%93%E5%BE%B7%E7%BB%8F%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A02/</id>
    <published>2024-09-03T14:33:45.127Z</published>
    <updated>2024-09-07T09:20:43.407Z</updated>
    
    <content type="html"><![CDATA[<p>《道经帛书版》45章01</p><blockquote><p>道可道也，非恒道也。名可名也，非恒名也。</p><p>无名，万物之始也。有名，万物之母也。</p><p>故恒无欲也，以观其妙；恒有欲也，以观其所徼(jiào)。</p><p>两者同出，异名同谓，玄之又玄，众妙之门。</p></blockquote><p><code>“道可道也，名可名也”</code></p><p>第二个道、第二个名，是名词动用。道，道路，用来走的，可以遵照执行的。（不是用来说的，对第一句通常的解释—能够讲出来的道不是恒长的道。我的理解是可以遵照执行的道，不是恒长的道。）<br><code>“非恒道也”</code></p><p>避讳汉文帝刘恒，恒改为长。<br>经只是一种形式，不要执迷于形式。将佛法比喻成竹筏，用竹筏过河后不需要再带着竹筏，不着相。你明白了道理后去奉行，不用背着竹筏了。拿一个法则，当作金科玉律，比如一天喝八杯水，冬天和夏天一样吗，冬天出汗又没夏天多，再者老人小孩一样吗？</p><p><code>“名可名也，非恒名也”。</code></p><p>第一个名，万物都有具体的称谓。现在我正在打字的电脑，十年前构造它笔记本外层、显示屏框架、键盘、笔记本底座的工程塑料、铝/镁/镁锂合金、碳纤维复合材料还在荒山野岭中待提炼，几百年后它又化成各种金属，它是变化着的，名不能涵盖它永恒的属性。手机有摄像功能、录音功能、笔记功能，在手机上加上智能二字，也涵盖不了所有特征。命名穷尽不了事物的本质。抱怨招不到合格的员工，天生就有合格的员工吗？十全十美的人早就找到其他岗位。固执于形名。其实任何一个人，只要这人不是大恶之人，到单位来，给他一点点儿培养都会培养成才、都会让他得到发展，得到成长。最后这人一定会胜任工作。</p><p><code>无名，万物之始也。有名，万物之母也。</code></p><p>科学家认为宇宙是137亿年前产生的，宇代表上下方位。光绕地球一圈是0.13秒，但要走到宇宙尽头需要120亿年。<br>始，女子怀胎，生命刚开始孕育的时候，谓之始。孩子生下来，长大长高、有思想。老子是无神论，主张万物之前是无。</p><p><code>故恒无欲也，以观其妙；恒有欲也，以观其所徼(jiào)。</code></p><p>直觉（放空、跳出来看），+理性（通过自己的理智、条件分析事物运行的规律），两种同时发力，一个是放下欲望（致虚极，在安静的状态下获得灵感。），一个是带着自己的欲望和观点，绝对是一种智慧，不带主观判断不先入为主，两个小孩儿打架。两个部门有矛盾，主管一方面公平客观看待两个部门的冲突；一方面能有心思、保持自己的欲望，带着自己的思想和意识，确定出两方各自的小99，什么导致冲突。一个部门是我带起来的，亲手培养起来的，我作为领导者，如何更好处理这件冲突。</p><span id="more"></span><p><code>两者同出，异名同谓，玄之又玄，众妙之门。</code></p><p>两者：（有、无）<br>玄：偏红偏紫的颜色。微妙的状态，人体的DNA，万物的最终状态，螺旋的形状。<br>众妙之门：只是一种门径，形。女少为妙，美好的。</p><p>道德经第一章讲的是什么呢？是道与世界的关系，它上来就立了一个特别有意思的一个观点----世界生成啊，不是像我们想象的由神来造的。老子认为这之前有个力量，这个力量呢，形容不清楚，但能感知到它存在，这个力量呢参与了世界的生成，它是世界生成的源头。它的状态一开始无名无形，后来发展有万物以后是有名有形，推动万物的发展，那么我们要以两种状态去感知它，一种是放空自己的这种无欲的状态，一种是有欲的状态，用两种状态去感知它，会了解道怎么运行的，然后才能在这个世界中去建立人的法则。</p><p>第一章定下整个基调，世界观是什么样，认为道是什么，先给大家做了一个概述。接下来道德经的第二章进行天之道和圣人之道关系的评述。经典里一句简单的话，给你启发，做事儿带来变化，找事物的本质。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;《道经帛书版》45章01&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;道可道也，非恒道也。名可名也，非恒名也。&lt;/p&gt;
&lt;p&gt;无名，万物之始也。有名，万物之母也。&lt;/p&gt;
&lt;p&gt;故恒无欲也，以观其妙；恒有欲也，以观其所徼(jiào)。&lt;/p&gt;
&lt;p&gt;两者同出，异名同谓，玄之又玄，众妙之门。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;“道可道也，名可名也”&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;第二个道、第二个名，是名词动用。道，道路，用来走的，可以遵照执行的。（不是用来说的，对第一句通常的解释—能够讲出来的道不是恒长的道。我的理解是可以遵照执行的道，不是恒长的道。）&lt;br&gt;
&lt;code&gt;“非恒道也”&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;避讳汉文帝刘恒，恒改为长。&lt;br&gt;
经只是一种形式，不要执迷于形式。将佛法比喻成竹筏，用竹筏过河后不需要再带着竹筏，不着相。你明白了道理后去奉行，不用背着竹筏了。拿一个法则，当作金科玉律，比如一天喝八杯水，冬天和夏天一样吗，冬天出汗又没夏天多，再者老人小孩一样吗？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;“名可名也，非恒名也”。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;第一个名，万物都有具体的称谓。现在我正在打字的电脑，十年前构造它笔记本外层、显示屏框架、键盘、笔记本底座的工程塑料、铝/镁/镁锂合金、碳纤维复合材料还在荒山野岭中待提炼，几百年后它又化成各种金属，它是变化着的，名不能涵盖它永恒的属性。手机有摄像功能、录音功能、笔记功能，在手机上加上智能二字，也涵盖不了所有特征。命名穷尽不了事物的本质。抱怨招不到合格的员工，天生就有合格的员工吗？十全十美的人早就找到其他岗位。固执于形名。其实任何一个人，只要这人不是大恶之人，到单位来，给他一点点儿培养都会培养成才、都会让他得到发展，得到成长。最后这人一定会胜任工作。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;无名，万物之始也。有名，万物之母也。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;科学家认为宇宙是137亿年前产生的，宇代表上下方位。光绕地球一圈是0.13秒，但要走到宇宙尽头需要120亿年。&lt;br&gt;
始，女子怀胎，生命刚开始孕育的时候，谓之始。孩子生下来，长大长高、有思想。老子是无神论，主张万物之前是无。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;故恒无欲也，以观其妙；恒有欲也，以观其所徼(jiào)。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;直觉（放空、跳出来看），+理性（通过自己的理智、条件分析事物运行的规律），两种同时发力，一个是放下欲望（致虚极，在安静的状态下获得灵感。），一个是带着自己的欲望和观点，绝对是一种智慧，不带主观判断不先入为主，两个小孩儿打架。两个部门有矛盾，主管一方面公平客观看待两个部门的冲突；一方面能有心思、保持自己的欲望，带着自己的思想和意识，确定出两方各自的小99，什么导致冲突。一个部门是我带起来的，亲手培养起来的，我作为领导者，如何更好处理这件冲突。&lt;/p&gt;</summary>
    
    
    
    <category term="书籍" scheme="https://verasince1997.github.io/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
    <category term="道德经" scheme="https://verasince1997.github.io/tags/%E9%81%93%E5%BE%B7%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>《一句顶一万句》书评</title>
    <link href="https://verasince1997.github.io/2024/08/31/%E4%BA%BA%E6%96%87/%E4%B8%80%E5%8F%A5%E9%A1%B6%E4%B8%80%E4%B8%87%E5%8F%A5/"/>
    <id>https://verasince1997.github.io/2024/08/31/%E4%BA%BA%E6%96%87/%E4%B8%80%E5%8F%A5%E9%A1%B6%E4%B8%80%E4%B8%87%E5%8F%A5/</id>
    <published>2024-08-31T14:13:25.408Z</published>
    <updated>2024-08-31T14:16:51.486Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是我为线下读书分享活动准备的稿子，传至个人博客上记录。</p></blockquote><p>刘震云的一个朋友，他的老婆出轨了，刘震云就对他的朋友说，一个女人出轨，那个男人一定是说了一句让她心动的话，这一句话顶过他朋友的一万句话，但是他们都不知道那句话是什么，为了找到那句话，就开始创作这本书。</p><p>主人公叫杨百顺，他的父亲是卖豆腐的老杨，赶着巴结不拿他当朋友的马家庄赶大车的老马，拿他当朋友的，想跟他多说一句话，老杨倒对他爱搭不理。老杨解释这样做的原因呢：”论起事来，同样一件事，我只能看一里，他能看十里，我只能看一个月，他一下能看十年“；又说：“以后遇到事，就想找他商量。”</p><p>其实听明白了，还是想占人便宜，遇事自个儿拿不定主意，想借人一双眼。自打认识老杨，老马给老杨出过不下一百个主意；老马从老杨那里，听到的却全是废话。那既然老马看不上老杨，为啥还跟他来往呢？因为方圆百里，哪儿还有一下看十里和看十年的人呢？老马也是一辈子没朋友。</p><p>老杨都找老马请教什么呢？老杨有三个儿子，大儿子继承家业卖豆腐，剩下两个儿子争着上“延津新学”。但两个儿子到底让谁去呢？卖豆腐的老杨又犯了愁。老杨一犯愁，又跑到马家庄找老马。</p><p>老马说“上学做官是为了啥？是为了回头卖豆腐。老杨家有一人在县政府，世上的豆腐千千万，但在县政府当过差的豆腐，也就老杨一家。再说回让谁去，人就像鸟一样，脑子好使，翅膀一硬就飞了；脑子笨，撒出去才能飞回来。脑子好使的，豆腐拴不住他；脑子笨的，才能飞回豆腐上。老马让老杨抓阄，让脑子笨的去。两张纸都写着“不上”，故意让脑子好使的主人公杨百顺先抓。</p><p>杨百顺接受了命运的安排，安心卖起豆腐，某次在马家庄出摊时，皮匠老吕将老杨和老马共同商议的抓阄的内情，一五一十告诉了杨百顺。老吕不是与卖豆腐的老杨过不去，而是与马家庄赶大车的老马有过节。说起来，杨家上学抓阄的内情，并不是老马传出来的，还是老杨上次到马家庄卖豆腐，给人说了。老杨说这话是为了显示自己跟老马是朋友，常在一起说心腹话。<span id="more"></span></p><p>之后百顺在该起床磨豆腐的时辰，他起床但不磨豆腐，借着上茅房，从后墙扒出去，一个人走了。他终于可以离开家了。或者说，他终于找到了脱离老杨和豆腐的另一个理由。</p><p>之间还有很多的故事，百顺借由舞社火进县政府，进而被丧偶的吴湘湘看中,入赘到了西街馒头铺,不过百顺跟吴香香说不着,到跟吴香香五岁的女儿巧玲说得着,所以当吴香香跟隔壁银匠老高私奔后,百顺本想出门假意寻找几天,就带着巧玲重新过日子,谁想到在路上他竟弄丢了唯一说得着的巧玲,从此假找变成了真找,漂泊半生。</p><p>以上只是书中部分故事，各色人物层出不穷，故事耐人琢磨，值得静下心来去思考他们的处境、做出的选择，进而反观自己已经度过的人生。中国人吵架喜欢翻旧账，原本吵的是这件事，但把陈年烂谷子的事翻出来，总是话里有话,耐人寻味,人都被话拿住了。把一件事绕成了另一件事，把一件事说成了另一件事，一件事能扯出十件事，一件事十条理，到头来，不是最原本的事，中间拐着好几道弯。世上的人遍地都是。说得着的,却千里难寻,能得一个说得着，就是一句顶一万句。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这是我为线下读书分享活动准备的稿子，传至个人博客上记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;刘震云的一个朋友，他的老婆出轨了，刘震云就对他的朋友说，一个女人出轨，那个男人一定是说了一句让她心动的话，这一句话顶过他朋友的一万句话，但是他们都不知道那句话是什么，为了找到那句话，就开始创作这本书。&lt;/p&gt;
&lt;p&gt;主人公叫杨百顺，他的父亲是卖豆腐的老杨，赶着巴结不拿他当朋友的马家庄赶大车的老马，拿他当朋友的，想跟他多说一句话，老杨倒对他爱搭不理。老杨解释这样做的原因呢：”论起事来，同样一件事，我只能看一里，他能看十里，我只能看一个月，他一下能看十年“；又说：“以后遇到事，就想找他商量。”&lt;/p&gt;
&lt;p&gt;其实听明白了，还是想占人便宜，遇事自个儿拿不定主意，想借人一双眼。自打认识老杨，老马给老杨出过不下一百个主意；老马从老杨那里，听到的却全是废话。那既然老马看不上老杨，为啥还跟他来往呢？因为方圆百里，哪儿还有一下看十里和看十年的人呢？老马也是一辈子没朋友。&lt;/p&gt;
&lt;p&gt;老杨都找老马请教什么呢？老杨有三个儿子，大儿子继承家业卖豆腐，剩下两个儿子争着上“延津新学”。但两个儿子到底让谁去呢？卖豆腐的老杨又犯了愁。老杨一犯愁，又跑到马家庄找老马。&lt;/p&gt;
&lt;p&gt;老马说“上学做官是为了啥？是为了回头卖豆腐。老杨家有一人在县政府，世上的豆腐千千万，但在县政府当过差的豆腐，也就老杨一家。再说回让谁去，人就像鸟一样，脑子好使，翅膀一硬就飞了；脑子笨，撒出去才能飞回来。脑子好使的，豆腐拴不住他；脑子笨的，才能飞回豆腐上。老马让老杨抓阄，让脑子笨的去。两张纸都写着“不上”，故意让脑子好使的主人公杨百顺先抓。&lt;/p&gt;
&lt;p&gt;杨百顺接受了命运的安排，安心卖起豆腐，某次在马家庄出摊时，皮匠老吕将老杨和老马共同商议的抓阄的内情，一五一十告诉了杨百顺。老吕不是与卖豆腐的老杨过不去，而是与马家庄赶大车的老马有过节。说起来，杨家上学抓阄的内情，并不是老马传出来的，还是老杨上次到马家庄卖豆腐，给人说了。老杨说这话是为了显示自己跟老马是朋友，常在一起说心腹话。&lt;/p&gt;</summary>
    
    
    
    <category term="书籍" scheme="https://verasince1997.github.io/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
    <category term="人文" scheme="https://verasince1997.github.io/tags/%E4%BA%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>道德经从入门到精通01</title>
    <link href="https://verasince1997.github.io/2024/08/31/%E9%81%93%E5%BE%B7%E7%BB%8F/%E9%81%93%E5%BE%B7%E7%BB%8F%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A01/"/>
    <id>https://verasince1997.github.io/2024/08/31/%E9%81%93%E5%BE%B7%E7%BB%8F/%E9%81%93%E5%BE%B7%E7%BB%8F%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A01/</id>
    <published>2024-08-31T13:45:12.571Z</published>
    <updated>2024-09-03T14:33:24.263Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>初探道德经</p></blockquote><p>人出名后，就有不符合实际的传说，比如老子生下来是老头。传闻老子只是道德经的编辑者，源头是上古时代领导者（尧舜禹）整理的治理国家的方法。老子所处时期时处东周春秋时期，希望后世领导者学习。即人之所教，我亦教之。（公司的领导要学，基本的规律、法则。）</p><p>老子《道德经》中讲了两个道， 【天之道】、 【圣人之道】。老子并没有把道讲得很玄乎，因为市面上教授道德经的有意无意把这两个道混在一起。道德经不是嘉靖帝修炼长生不死，这偏离道德经本质。</p><p>【天之道】：即在人世间之上有一种力量，按照这个力量的存在构成了现在的世界，无法命名，勉强命名为“道”。比如“举头三尺有神明”，宗教就运用这种力量。比如稻盛和夫的“宇宙意志，敬天爱人。”人类好像是一个神秘力量建造的游戏，我们不懂游戏规则，懂规则玩得更开心。</p><p>【圣人之道】：即领导者法则，有道的国家领导者，去观摩效仿天之道。观察其特点，是制定理解圣人之道的方法。上如何如何，民如何如何。整个世界怎么来的，一个点大爆炸，现在还在爆炸的膨胀中，所有的星系正在远离我们。爆炸之前的宇宙是什么样的？天之道模糊，圣人之道可以由看得到人世间怎么运行，领导者要尽量放下自己的欲望，为你管理的百姓做事。公司的领导者放下自己的名利，专注员工的物质和精神。</p><span id="more"></span><p>道的三个内涵：</p><ul><li>第一个内涵：根本没有永远的事，我们只是其中的一个片段，期间变化不息。烦恼来源于想永远拥有。怎么解决：共同度过。手里的手机，十年前，在山里是金属，几十年后被压碎回收，只不过它现在叫手机，贪官家里的钱长毛了，敢花这些钱吗，怎么体现他永远拥有这些钱，回家点钱，体验拥有的感觉。放下，不要太执着了。较劲，执着，家长这个性格，考第一赚钱买房子，孩子在这种压力下就会生病。找到乐趣，你找到这件事的根本意义所在。沙在手里，轻轻地捧一把，比捏紧它拥有更多。学会放下，不执着于形名，人生会从容。这是道的第一个内涵。</li><li>第二个内涵，世界是一个联系的整体，十个人坐一个圆桌，我不和左边的人说话，如何让他对我笑，我对右边的人笑，依          次传递，就会收获左边人的笑，实际上收获到9个人的笑。<br>我们经历的事情不过就是这一桌子的事。你发出的信息，世界会回馈到你，逃不掉。如果各位我们能够按照这个法则去做事儿，那您人生无往不利，会越来越丰盛的好。</li><li>第三个内涵，我们该怎么做？不计回报。无我利他。尽量放下自己的欲望，不计回报发出善的信息。你天天骂人，别人不可能不回馈你，你80岁还被骂，你愿意这样度过这一生？</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;初探道德经&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人出名后，就有不符合实际的传说，比如老子生下来是老头。传闻老子只是道德经的编辑者，源头是上古时代领导者（尧舜禹）整理的治理国家的方法。老子所处时期时处东周春秋时期，希望后世领导者学习。即人之所教，我亦教之。（公司的领导要学，基本的规律、法则。）&lt;/p&gt;
&lt;p&gt;老子《道德经》中讲了两个道， 【天之道】、 【圣人之道】。老子并没有把道讲得很玄乎，因为市面上教授道德经的有意无意把这两个道混在一起。道德经不是嘉靖帝修炼长生不死，这偏离道德经本质。&lt;/p&gt;
&lt;p&gt;【天之道】：即在人世间之上有一种力量，按照这个力量的存在构成了现在的世界，无法命名，勉强命名为“道”。比如“举头三尺有神明”，宗教就运用这种力量。比如稻盛和夫的“宇宙意志，敬天爱人。”人类好像是一个神秘力量建造的游戏，我们不懂游戏规则，懂规则玩得更开心。&lt;/p&gt;
&lt;p&gt;【圣人之道】：即领导者法则，有道的国家领导者，去观摩效仿天之道。观察其特点，是制定理解圣人之道的方法。上如何如何，民如何如何。整个世界怎么来的，一个点大爆炸，现在还在爆炸的膨胀中，所有的星系正在远离我们。爆炸之前的宇宙是什么样的？天之道模糊，圣人之道可以由看得到人世间怎么运行，领导者要尽量放下自己的欲望，为你管理的百姓做事。公司的领导者放下自己的名利，专注员工的物质和精神。&lt;/p&gt;</summary>
    
    
    
    <category term="书籍" scheme="https://verasince1997.github.io/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
    <category term="道德经" scheme="https://verasince1997.github.io/tags/%E9%81%93%E5%BE%B7%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>也许你该找人聊聊</title>
    <link href="https://verasince1997.github.io/2022/05/15/%E4%BA%BA%E6%96%87/%E4%B9%9F%E8%AE%B8%E4%BD%A0%E8%AF%A5%E6%89%BE%E4%BA%BA%E8%81%8A%E8%81%8A/"/>
    <id>https://verasince1997.github.io/2022/05/15/%E4%BA%BA%E6%96%87/%E4%B9%9F%E8%AE%B8%E4%BD%A0%E8%AF%A5%E6%89%BE%E4%BA%BA%E8%81%8A%E8%81%8A/</id>
    <published>2022-05-15T04:34:39.291Z</published>
    <updated>2024-08-26T04:39:48.252Z</updated>
    
    <content type="html"><![CDATA[<p>在开始阅读这本书之前很久，就知道它大名，真正决定好好读完这本大众心理读物，是某天刷微博看到《暗时间》的作者刘未鹏在博文中推荐这本书。我心想，通过阅读《暗时间》，我跟着作者的思维一起探索自己的观点、生活方式，并改变了自己的某些观念，这个作者想法挺多，也十分有趣，如果是他的强烈推荐，那我必须得好好读读这本书。<br>时间来到读完了这本书，我就得想想有什么思考，首先说故事情节，像是你打开了纪录片，看了5个不同的人，却都困在现实生活的泥潭中，他们从一开始的不愿表达出真实的一面，到慢慢地愿意揭开一层层造成现状的创伤，（在这些篇幅中，透过作者通俗化生活化的讲述，我们得以了解心理治疗师是如何“施以巧计”让来访者愿意把真相一字一句说出来，这个角度也挺有趣的，了解了治疗师的日常工作方式。）我们也从不知道他为什么是这样的脾气、生活状态、人际关系，到“哦，原来是这样，他过去经历的事，没有好好处理，没有机会治愈，就迫于现实的残酷，草草包扎下，把伤疤用贴纸盖上并不能从本质上轻而易举地一笔带过心灵上的创伤。”然后我们关注心理治疗师如何引导这些开始正视真实、脆弱、破碎的自我的个体完成进一步的思维上、观念上、行为上的转变。解决顽疾的确麻烦，先要不掩饰自己很痛苦，让治疗师知道自己很难做，然后要在两颗心灵的对话中发现自己固执己见、根深蒂固的行为模式是一种心理防御机制，最后想通一些事，完成观念上的转变；或者是自己看到了另一种可能，然后觉得还不赖，在尝试后感觉比之前好，之后就慢慢完成观念的转变。读完5个治疗故事，很舒服，像亲历了整个治疗过程，是一种思维的畅快，心灵上的慰藉，温暖柔软、细腻真切。在某司上班时，它提供了一个免费的心理咨询，大概50min吧，我报名参加了，在咨询前我打好了底稿，自己要讲什么经历，想要询问什么，想要探讨什么，这短短50min我好像出现了Flow心流状态，可太惬意了。结合这本书，我对心理咨询的定义大致是“在忙乱或者假装过得很忙乱实则浑浑噩噩度日的生活中，去关爱自己，让心灵放松，直视一直焦虑的问题，对一个有经验有技巧的咨询师将真实和盘托出。有句话是“有的事情说出来让别人知道，你就会发现没那么糟糕。”咨询师会和你一起探讨你做出不当行为的原因，以及接下来我们可以怎么解决问题”。对于本书内容我大概就这些感受，接下来是我将书中观点与自己现状结合引发的思考。<span id="more"></span><br>写自己的故事还是难以下笔的，因为最基本的是你要袒露自己的劣根性。很喜欢Vain这个单词，因为它的意思非常现实，（Vain：徒劳、自负、无用功）这不就是说一直以来aimlessly度日的我吗？我记性还算可以，平常也喜欢想东想西，很喜欢站在今天的时间把同一性质发生在不同时间的事串起来分析我身边的人、事物、行为，结果就是我大脑中存储了非常多我经历过的事情，一天搁这胡乱思考、伤春悲秋、自我审视。我特别喜欢模糊问题，不去思考安身立命的根源，用一些娱乐转移焦虑打发时间。（在此感谢阳明心学，某种程度上让我尝试开始不把时间用在不必要的攀比；或者因为不愿直视麻烦的现状而拖延时间、不做实事、掩盖局面。转而思考起怎么才能在几年甚至以后都过上心态安宁的生活。）所以要写自己的遭遇还挺需要勇气的，知道自己浪费了很多机会，现在要说出来，你说难受不难受？<br>我有过几次长期浪费自己时间的经历，逃避问题，说实在有点搞笑，就好比只有在一个比较长的假期结束前一天，心里会出现一种为什么不惜时的觉悟，但是当自己有很长时间准备一件事的时候，却总觉得给的时间太足够了（不晓得在哪看过一句话，“你总以为还有时间，这就是问题所在。”）我经历过几次觉得“这件事是很麻烦，是个长线任务，但现在动手好早哦，再拖几天”。在拖到终于开始的时候，我会有两条路，一条是虽然不细致计划，但会学几天了解自己学习摄入速度，要花时间在心里盘算，一周后、一个月后、三个月后、自己可以学到什么程度，而且是动态规划，因为百分之百不可能按最初的计划完成进度，你就得在大方针基本不变的情形下，对下一周的安排注入最新最适合你的策略，这样的奋斗岁月会很充实且从容自信。很喜欢谷爱凌在冬奥比完赛回答记者提出的“如何看待天赋和努力”的发言，“天赋可能会让你在一开始的时候上手比别人快，但决定胜负是要靠刻意训练堆积，我自己给自己设计训练内容及时长，我把我能想到的都做完了。”这样在准备的每一天以及最后上战场时，内心都很坦然。其实我发现苏翊鸣向外界传达的信息也是类似，他很幸运发现自己的热爱，并付出了他认知范围内最大的努力。这是他的一句话：“时间从来就是梦想的朋友，努力永远不会欺骗人。”；另一条路是我一直以来选择的（真是惭愧），我不敢计划，因为我觉得好像有点搞不定，自我欺骗式的说埋头学就是了，反正我每天就固定好足量时间学，肯定会学完的，至于何时学完，那是时间的事，我只管每天定时坐在那个位置继续学就是了。（典型的用战术上的勤奋掩盖战略上的懒惰。（战略是指选择做什么的“什么”和“为什么”，战术是指计划如何实现它。通俗来说，战略是做正确的事 ， 战术是正确地做事。））其实决定一件事成败不是最后检验的面试、考试时刻，我觉得从开始准备的时候，我的想法和行为就在慢慢影响我的信心，我选择第二条路，不就是不相信自己可以通过反复多次的刻意训练然让自己熟练掌握考核技能嘛。所以说我真的蠢，一开始时间是够用的，可以开展几轮地毯碾压式复习。而我宁愿每天生活在无聊痛苦中，也不愿意用一年的时间改变自己。我不想走第二条路了！！！那可真的是百无聊赖啊，我让自己天天玩，定点吃饭（当然有个习惯保持得很好，除了生理期，我每天都会运动差不多1.5个h，由此可见坚持运动实在是比让自己时刻做到“心外无物、知行合一、致良知”easy多了。）在我这样自我放弃式的生活了几天，我每天都会感叹，为啥时间过得这么慢，下午15点38分，我先看成16点38分，心想“哇耶！马上17点了，可以吃晚饭，然后等消化完就可以运动了，运动了就可以洗澡了，洗完澡玩一会儿就可以睡觉了，终于到第二天了！”，然而当发现自己看错了，是15点38分，心一下就蔫了，今天这一天怎么这么长的无力感慨再次占据我的心灵。所以，真的，艰难前行的日子难受，但自暴自弃、不直面问题、选择躺平更让人痛苦。我现在回想都觉得诧异，居然期望时间快点过去，这种反人类的思维也让我品尝到恶果，我那段时间就是生活的不开心，以前我还潜意识里，就是我自己都没意识到的，会看着别人的学习工作轨迹，与自己的比。现在入门了点《易经》、《道德经》、《传习录》，尤其是王阳明的心学，让我慢慢地改变观念，还实践上了道家的“无为而无不为”，儒家的“无所为而为”，佛家的“无心而为”。现在我所理解的安身立命，即我是一个每天必须摄取食物、必须拿9个小时睡觉、存活时间不会超过百年、可以通过日复一日的推进累积知识的个体。如果想要look behind觉得充实、有成就感、获得自己肯定；想要做到宠辱不惊、淡定从容。就需要发现自己擅长做、喜欢做、有价值利益做的工作，然后堆经验值，了解这个行业，这个知识体系为何出现、发展过程、未来趋势、以及我能用它为社会创造什么便捷or福利。无论是24岁，抑或是34岁、44岁、54岁，无论结婚了、有孩子了、离婚了、移民了，陪伴身旁的人换了一批又一批，你还是从一开始累积知识的综合体，可以想象到的是你离开世界前，如果你的另一半先去了几年，那剩下的几年时间要是想活得开心，我想咱们得培养一个热爱，让自己可专注投入、开心做的事业。</p><p>老子在《道德经》说：“非以其无私邪？故能成其私。”我的理解和央视主持人白岩松差不多，即“无私为大私”。大三的时候站在学校门口的江边看江水流过，我想即便初中没学过“逝者如斯夫，不舍昼夜”的人也会发出类似“无论我们今天选择做什么，江水、时间都会机械地自顾自地流逝，所以面对时间消逝，我们是无力的。”的感慨。即有的东西和几千年前是通的，日常人际交往中出现的那些小九九、如何打交道、人性的问题、怎么做才能达到最初的设想，先哲都有过思考，所以《易经》、《道德经》是一定要研读的，我由这本心理书引出的上面狗屁不通的思考也是为了让自己更看清自我本来的面目，不要再粉饰太平，知道自己很垃圾后，做出改变，然后实现自己的某些期许（我有一个爱好，记录自己的旅行轨迹，我找了很久，没有很好的程序应用，看来和我有一样需求的人不多，我得自己花大量时间研发一个“在结束某次旅行的几百天后，我突然心血来潮，想回顾几百天前的某一日，自己从A酒店到B景点，用了什么交通工具，那条路上我拍摄的照片能出现在地图上，从B景点到C餐馆我选择走了哪条路，当时的天气如何，我吃了什么？结束后我是选择回酒店睡午觉还是急忙奔赴下一个景点？”在某厂实习时，我是写Python搞数据科学的，问了会swift搞ios 应用程式的同学，他提议我先写出类似keep锻炼软件能记录运动轨迹的功能，但我在想如果我旅行要记录完整轨迹和行程信息，这数据上传到服务器，我应用得一直开着，还是很耗电的。哦豁，我就一直停滞没动，“致良知”，致：听从，然后知行合一，所以我得去学啊，做不出就挺尬的，自己喜欢的都做不出，算什么程序员？），不和peer比较不等于不期待最终的pk环节，在我目前的认知看来，两三年的财富和社会关系总和并不稳定，对于我们这群即将迎接25岁生日的青年，我们还没安定下来，现在正是多吃苦的时刻，先踏实充满热情过好每一天，有句话虽然看起来无力，但是在理：“不要高估每一日的努力，不要低估每一天的积累。”这个世界就是这样，你今天学的或者今天的饮食和运动，不能马上体现在测试中考察到你或者明早上称时体重降低，但你今天不这么做又不行，所以只有改变自己的观念，把这种激情学习和健康减肥融入自己的生活，每天都不间断的坚持，时间线一拉长，真有改变。我擅长浪费时间在无意义的焦虑上，我一方面觉得时间多，另一方面觉得要系统学好一个体系好难哦，那把你认为的大把不知道怎么花的时间用在一点一点突破这个知识体系上。想通根源性问题，专注累经验，宠辱不惊、淡定从容。能做到安身立命，然后实现最初的愿景，这就是我理解的“无私为大私”。</p><p>宠辱不惊、淡定从容这两点我真迫切想知道能做到是什么体验，受到敬仰的人的肯定时，其实也没什么大不了，但我就心花怒放、一颗心砰砰跳跳、恼火得很。首先她的肯定并不会让我额外获得什么，而且那也是我之前做的事让她肯定我，接下来我一蹶不振也是有可能的，而她也不会插手管我。再者我和她的阶层关系并没改变，她还是那么的遥不可及，我还得继续践行我“安身立命”的每日计划，做不到宠辱不惊应该是自己的价值观不完善，不清楚和不愿面对自己现在的实力，当一个比你高级的人向你“抛出橄榄枝”，你就以为自己很快能提升到她那样的能力，但实际还得靠刚才说的“努力一天没用，但要前进只有靠一天一天的积累”来逐步提升能力。我思考这些后，就没啥偶像了，以前有两个偶像，一个师姐一个师弟，基本上每天都会想起他俩，我们有着同样的追求，并凭借自己的奋斗出现在北京、深圳、上海同样的写字楼与风景中，走过同样的街道，完成同样性质的工作，我们的关系坚强又脆弱。现在就觉得要是不专注自己，其实很现实的，根本没有再见他俩或是交流心得、合作的契机。而且我最讨厌的就是ambiguous模棱两可，做题不喜欢同性质的问题讲些有的没的，我要暂停做题节奏，转而自己总结一套此类题型的打法，很多变型都是从根源问题修改一丢丢来的，有了自己总结的套路，我不需要记那么多有的没的，隔了很久再看它，我还是能从0到1推出它到底是个什么东西、它到底怎么求解。也不喜欢和人的关系模棱两可，不需要想太多，想好自己要做什么，做自己的事就是了，有点搞笑吧，财富和能力不在同一水平的人，我个人认为亲密关系不会长久。<br>要再阅读深入心灵的读物，因为做不到淡泊从容、宠辱不惊、心如止水式生活。阳明心学就可以解决上述问题，只是我道行太浅，需要苦难和时间磨练。此刻的我就像东周末年，面临最大痛苦的人类，和他们一样，开始探求真理。孔子、老子、诸子百家，百家争鸣在浩劫变动中孕育而生。如何安排最难安排的生活？为什么要安排，因为要安顿心，心外无物，心有无限的一面，生命的最大问题是生命内部的麻烦，即无限心的安顿。先出世再入世，以出世的精神做入世的事情。“人如何安排好自己最难安排的生活，人如何安顿自己的无限心。”此乃中国哲学根本。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在开始阅读这本书之前很久，就知道它大名，真正决定好好读完这本大众心理读物，是某天刷微博看到《暗时间》的作者刘未鹏在博文中推荐这本书。我心想，通过阅读《暗时间》，我跟着作者的思维一起探索自己的观点、生活方式，并改变了自己的某些观念，这个作者想法挺多，也十分有趣，如果是他的强烈推荐，那我必须得好好读读这本书。&lt;br&gt;
时间来到读完了这本书，我就得想想有什么思考，首先说故事情节，像是你打开了纪录片，看了5个不同的人，却都困在现实生活的泥潭中，他们从一开始的不愿表达出真实的一面，到慢慢地愿意揭开一层层造成现状的创伤，（在这些篇幅中，透过作者通俗化生活化的讲述，我们得以了解心理治疗师是如何“施以巧计”让来访者愿意把真相一字一句说出来，这个角度也挺有趣的，了解了治疗师的日常工作方式。）我们也从不知道他为什么是这样的脾气、生活状态、人际关系，到“哦，原来是这样，他过去经历的事，没有好好处理，没有机会治愈，就迫于现实的残酷，草草包扎下，把伤疤用贴纸盖上并不能从本质上轻而易举地一笔带过心灵上的创伤。”然后我们关注心理治疗师如何引导这些开始正视真实、脆弱、破碎的自我的个体完成进一步的思维上、观念上、行为上的转变。解决顽疾的确麻烦，先要不掩饰自己很痛苦，让治疗师知道自己很难做，然后要在两颗心灵的对话中发现自己固执己见、根深蒂固的行为模式是一种心理防御机制，最后想通一些事，完成观念上的转变；或者是自己看到了另一种可能，然后觉得还不赖，在尝试后感觉比之前好，之后就慢慢完成观念的转变。读完5个治疗故事，很舒服，像亲历了整个治疗过程，是一种思维的畅快，心灵上的慰藉，温暖柔软、细腻真切。在某司上班时，它提供了一个免费的心理咨询，大概50min吧，我报名参加了，在咨询前我打好了底稿，自己要讲什么经历，想要询问什么，想要探讨什么，这短短50min我好像出现了Flow心流状态，可太惬意了。结合这本书，我对心理咨询的定义大致是“在忙乱或者假装过得很忙乱实则浑浑噩噩度日的生活中，去关爱自己，让心灵放松，直视一直焦虑的问题，对一个有经验有技巧的咨询师将真实和盘托出。有句话是“有的事情说出来让别人知道，你就会发现没那么糟糕。”咨询师会和你一起探讨你做出不当行为的原因，以及接下来我们可以怎么解决问题”。对于本书内容我大概就这些感受，接下来是我将书中观点与自己现状结合引发的思考。&lt;/p&gt;</summary>
    
    
    
    <category term="书籍" scheme="https://verasince1997.github.io/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
    <category term="人文" scheme="https://verasince1997.github.io/tags/%E4%BA%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>进制转换模板</title>
    <link href="https://verasince1997.github.io/2022/02/20/%E7%AE%97%E6%B3%95/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%A8%A1%E6%9D%BF/"/>
    <id>https://verasince1997.github.io/2022/02/20/%E7%AE%97%E6%B3%95/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%A8%A1%E6%9D%BF/</id>
    <published>2022-02-20T09:13:13.716Z</published>
    <updated>2022-02-20T09:40:13.454Z</updated>
    
    <content type="html"><![CDATA[<p>直接写上我整理出的x进制转为y进制代码。思路是先将x进制的数转为10进制。比如16进制的A1要转为10进制，对于s[0]=‘A’  <code>ans+=s[0]-'A'+10</code>，然后<code>ans*=x</code>，ans=160，再加上s[1]-‘0’，ans为161。在从10进制到y进制的过程中，当取余值&lt;10时，直接加上字符0；而当其&gt;=10时，又不能打表，所以要减10，再加上字符A(或者加上字符a，看题)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">105</span>];<span class="comment">//24</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s&gt;&gt;x&gt;&gt;y;<span class="comment">//x=8 y=10</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);<span class="comment">//len=2</span></span><br><span class="line">    <span class="comment">//先转为十进制</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        ans*=x;<span class="comment">//8进制转为10进制  8进制的24 4*8^0 + 2*8^1=20  </span></span><br><span class="line">      <span class="comment">//16进制的A1转为10进制 </span></span><br><span class="line">        <span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i]&lt;=<span class="string">&#x27;9&#x27;</span>) ans+=(s[i]-<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">        <span class="keyword">else</span> ans+=(s[i]-<span class="string">&#x27;A&#x27;</span>)+<span class="number">10</span>;<span class="comment">// ans=10 ans= 10*16=160 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ans!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> w= ans%y;</span><br><span class="line">        <span class="keyword">if</span>(w&lt;<span class="number">10</span>) v.push_back(w+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">else</span> v.push_back((w<span class="number">-10</span>)+<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        ans/=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=v.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;v[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;直接写上我整理出的x进制转为y进制代码。思路是先将x进制的数转为10进制。比如16进制的A1要转为10进制，对于s[0]=‘A’  &lt;code&gt;ans+=s[0]-&#39;A&#39;+10&lt;/code&gt;，然后&lt;code&gt;ans*=x&lt;/code&gt;，ans=160，再加上s[1]-‘0’</summary>
      
    
    
    
    <category term="OJ tricks" scheme="https://verasince1997.github.io/categories/OJ-tricks/"/>
    
    
    <category term="OJ tricks" scheme="https://verasince1997.github.io/tags/OJ-tricks/"/>
    
  </entry>
  
  <entry>
    <title>relationship &amp; backref</title>
    <link href="https://verasince1997.github.io/2022/02/19/python/flask/%E8%A7%86%E5%9B%BE%E5%86%85%E5%AE%B9%E4%B8%8E%E6%A8%A1%E6%9D%BF/"/>
    <id>https://verasince1997.github.io/2022/02/19/python/flask/%E8%A7%86%E5%9B%BE%E5%86%85%E5%AE%B9%E4%B8%8E%E6%A8%A1%E6%9D%BF/</id>
    <published>2022-02-19T13:06:32.654Z</published>
    <updated>2022-02-20T03:06:17.963Z</updated>
    
    <content type="html"><![CDATA[<p>写这篇文章时，我思考怎么才算理解掌握了从文档、视频学到的知识，写博客知识将习得的知识外现的一个最基础的步骤，关键看你总结出来的知识是否有体系完整，很有逻辑性，比如今天学到的backref和relationship，本来学的时候就一知半解，感觉懂了，我知道过了几天再看就不懂了，还不如一开始就彻底解决，我觉得这个东西本身就绕，我将通过一个例子，从没有使用这两个方法的查询代码与使用之后的查询代码相比较，从而从根本理解两者什么时候使用，怎么使用。</p><p>假设数据库中有两张表，一张Role表(Admin和User)，一张User表，那么一个角色可能有多个用户，但一个用户只能属于一个角色，所以Role和User是一对多的关系，下面是Role和User的模型类。<span id="more"></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&quot;roles&quot;</span>  <span class="comment"># 指定表名称</span></span><br><span class="line">    <span class="comment"># 参数1:表示整数类型,  参数2:表示主键</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 角色名唯一的</span></span><br><span class="line">    name = db.Column(db.String(<span class="number">64</span>), unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 需要设置关系属性relationship(不会产生字段),设置在一方</span></span><br><span class="line">    <span class="comment"># 给Role添加了users关系属性, 查询格式: role.users</span></span><br><span class="line">    <span class="comment"># 给User添加了role关系属性(反向引用),查询格式: user.role</span></span><br><span class="line">    <span class="comment"># 第一个参数是关联的模型类名称</span></span><br><span class="line">    users = db.relationship(<span class="string">&#x27;User&#x27;</span>, backref=<span class="string">&#x27;role&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 为了方便的看到对象输出的内容__repr__, 如果是普通类__str__</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;Role:%s&gt;&quot;</span> % self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户(多方)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&quot;users&quot;</span>  <span class="comment"># 指定表名称</span></span><br><span class="line">    <span class="comment"># 参数1:表示整数类型,  参数2:表示主键</span></span><br><span class="line">    id = db.Column(db .Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 用户名唯一的</span></span><br><span class="line">    name = db.Column(db.String(<span class="number">64</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 邮箱密码</span></span><br><span class="line">    email = db.Column(db.String(<span class="number">64</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    password = db.Column(db.String(<span class="number">64</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 外键</span></span><br><span class="line">    role_id = db.Column(db.Integer, db.ForeignKey(Role.id))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 为了方便的看到对象输出的内容__repr__, 如果是普通类__str__</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;User:%s,%s,%s,%s&gt;&quot;</span> % (self.id, self.name, self.email, self.password)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加外健在多方，添加relationship在一方。</p><p>现有需求如下：</p><p>1.知道Role，请查询出哪些用户数语此Role。</p><ul><li>原始查询方法：<ul><li>role = Role.query.get(1)</li><li>users = User.query.filter(<a href="http://role.id">role.id</a> == User.role_id)</li></ul></li><li>快速查询：<ul><li>role = Role.query.get(1)</li><li>users = role.users</li></ul></li></ul><p>2.知道某个用户，查询出该用户属于的role。</p><ul><li>原始查询方法：<ul><li>user = User.query.get(1)</li><li>role = Role.query.filter(user.role_id == <a href="http://role.id">role.id</a>)</li></ul></li><li>快速查询：<ul><li>user = User.query.get(1)</li><li>role = user.role</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;写这篇文章时，我思考怎么才算理解掌握了从文档、视频学到的知识，写博客知识将习得的知识外现的一个最基础的步骤，关键看你总结出来的知识是否有体系完整，很有逻辑性，比如今天学到的backref和relationship，本来学的时候就一知半解，感觉懂了，我知道过了几天再看就不懂了，还不如一开始就彻底解决，我觉得这个东西本身就绕，我将通过一个例子，从没有使用这两个方法的查询代码与使用之后的查询代码相比较，从而从根本理解两者什么时候使用，怎么使用。&lt;/p&gt;
&lt;p&gt;假设数据库中有两张表，一张Role表(Admin和User)，一张User表，那么一个角色可能有多个用户，但一个用户只能属于一个角色，所以Role和User是一对多的关系，下面是Role和User的模型类。&lt;/p&gt;</summary>
    
    
    
    <category term="Flask" scheme="https://verasince1997.github.io/categories/Flask/"/>
    
    
    <category term="Flask-SQLAlchemy" scheme="https://verasince1997.github.io/tags/Flask-SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>路由与视图</title>
    <link href="https://verasince1997.github.io/2022/02/19/python/flask/%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%A7%86%E5%9B%BE/"/>
    <id>https://verasince1997.github.io/2022/02/19/python/flask/%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%A7%86%E5%9B%BE/</id>
    <published>2022-02-19T08:16:18.979Z</published>
    <updated>2022-02-20T03:00:33.506Z</updated>
    
    <content type="html"><![CDATA[<p>1.能够创建Py2和Py3版本的虚拟环境</p><ul><li><p>查看虚拟环境版本：<br><code>virtualenv --version</code></p></li><li><p>创建虚拟环境：</p></li></ul><p><code>mkvirtualenv -p python3 虚拟环境名称(指定python3.x)</code><br><code>mkvirtualenv -p python3 py3_flask</code><br><code>mkvirtualenv py3_flask</code></p><ul><li><p>查看虚拟环境：<code>workon</code></p></li><li><p>使用虚拟环境：<code>workon 虚拟环境名称</code></p></li></ul><p>2.能够写出Flask从对象中加载配置的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>(<span class="params">object</span>):</span></span><br><span class="line">    DEBUG = <span class="literal">True</span>;</span><br><span class="line">    </span><br><span class="line">app.config.from_object(Config)</span><br></pre></td></tr></table></figure><p>3.能够说出url_for的作用</p><p>通常和redirect一起使用，用以传递参数。url_for反解析：通过视图函数的名称返回地址，格式：<code>url_for('视图函数名称',key=value)</code><span id="more"></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(&#x27;/demo5&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo5</span>():</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;https://ieee_fellow_jueluo.gitee.io/blog/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/demo1&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;demo1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/demo5&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo5</span>():</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;demo1&#x27;</span>))  </span><br><span class="line"><span class="comment"># 访问此路径 返回的是demo1</span></span><br></pre></td></tr></table></figure><p>4.能够写出带有参数的路由及视图函数</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(&#x27;/user/&lt;int:user_id&gt;&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span>(<span class="params">user_id</span>):</span>  <span class="comment"># 视图函数user_info</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;the num is %d&#x27;</span> % user_id</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(&#x27;/demo5&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo5</span>():</span></span><br><span class="line">    <span class="comment"># 使用url_for生成指定视图函数所对应的url</span></span><br><span class="line">    <span class="comment"># 格式 url_for(&#x27;视图函数名&#x27;,key=value)</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;user_info&#x27;</span>, user_id=<span class="number">1997</span>))</span><br></pre></td></tr></table></figure><p>5.能够说出自定义转换器的步骤</p><p>在 web 开发中，可能会出现限制用户访问规则的场景，那么这个时候就需要过滤指定用户, 所以可以使用转换器实现<br>转换器的本质:通过正则表达式,匹配路由地址</p><p>系统自带转换器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT_CONVERTERS = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>:          UnicodeConverter,</span><br><span class="line">    <span class="string">&#x27;string&#x27;</span>:           UnicodeConverter,</span><br><span class="line">    <span class="string">&#x27;any&#x27;</span>:              AnyConverter,</span><br><span class="line">    <span class="string">&#x27;path&#x27;</span>:             PathConverter,</span><br><span class="line">    <span class="string">&#x27;int&#x27;</span>:              IntegerConverter,</span><br><span class="line">    <span class="string">&#x27;float&#x27;</span>:            FloatConverter,</span><br><span class="line">    <span class="string">&#x27;uuid&#x27;</span>:             UUIDConverter,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义转换器,具体实现步骤为：</p><ul><li>导入转换器基类(BaseConverter)：Flask中所有的路由的匹配规则,都是使用转换器实现</li><li>自定义转换器：自定义类继承于转换器基类</li><li>添加转换器到默认的转换器字典中</li><li>使用自定义转换器实现自定义匹配规则</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义转换器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRegexConverter</span>(<span class="params">BaseConverter</span>):</span>  <span class="comment"># 继承BaseConverter类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url_map, regex</span>):</span>  <span class="comment"># 编写初始方法 接收两个参数</span></span><br><span class="line">        super(MyRegexConverter, self).__init__(url_map)  <span class="comment"># 初始化父类空间</span></span><br><span class="line">        self.regex = regex  <span class="comment"># 初始化子类空间</span></span><br><span class="line"></span><br><span class="line">app.url_map.converters[<span class="string">&#x27;re&#x27;</span>] = MyRegexConverter  <span class="comment"># 将自定义转换器类添加到默认的转换列表中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&lt;re(&quot;\d&#123;3&#125;&quot;):num&gt;&#x27;)  # 只接受三位小数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>(<span class="params">num</span>):</span></span><br><span class="line">    print(<span class="string">&quot;num = %s&quot;</span> % num)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;the num is %s&quot;</span> % num</span><br><span class="line">  </span><br><span class="line"><span class="meta">@app.route(&#x27;/&lt;re(&quot;1[345678]\d&#123;9&#125;&quot;):mobile&gt;&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mobile</span>(<span class="params">mobile</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;the mobile is %s&quot;</span> % mobile</span><br></pre></td></tr></table></figure><p>6.能够说出装饰器路由实现的几个关键的类</p><p>7.能够说出实现 HTTP 状态保持的原理</p><p>7.1 http是一种无状态协议，浏览器请求服务器是无状态的。</p><ul><li><strong>无状态</strong>：指一次用户请求时，浏览器、服务器不知道之前这个用户做过什么，每次请求都是一次新的请求。</li><li><strong>无状态原因</strong>：浏览器与服务器是使用 socket 套接字进行通信的，服务器将请求结果返回给浏览器之后，会关闭当前的 socket 连接，而且服务器也会在处理页面完毕之后销毁页面对象。<br>有时需要保持下来用户浏览的状态，比如用户是否登录过，浏览过哪些商品等</li></ul><p>7.2 实现状态保持主要有两种方式：</p><ul><li>在客户端存储信息使用<code>Cookie</code></li><li>在服务器端存储信息使用<code>Session</code></li></ul><p>8.能够说出Flask各个上下文对象</p><p>9.能够说出Flask-Script扩展的作用</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;1.能够创建Py2和Py3版本的虚拟环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查看虚拟环境版本：&lt;br&gt;
&lt;code&gt;virtualenv --version&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建虚拟环境：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;mkvirtualenv -p python3 虚拟环境名称(指定python3.x)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;mkvirtualenv -p python3 py3_flask&lt;/code&gt;&lt;br&gt;
&lt;code&gt;mkvirtualenv py3_flask&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查看虚拟环境：&lt;code&gt;workon&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用虚拟环境：&lt;code&gt;workon 虚拟环境名称&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.能够写出Flask从对象中加载配置的代码&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Config&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;object&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DEBUG = &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.config.from_object(Config)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.能够说出url_for的作用&lt;/p&gt;
&lt;p&gt;通常和redirect一起使用，用以传递参数。url_for反解析：通过视图函数的名称返回地址，格式：&lt;code&gt;url_for(&#39;视图函数名称&#39;,key=value)&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Flask" scheme="https://verasince1997.github.io/categories/Flask/"/>
    
    
    <category term="Flask" scheme="https://verasince1997.github.io/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>PAT_Basic_1095 解码PAT准考证</title>
    <link href="https://verasince1997.github.io/2022/02/15/pat_basic/pat_basic_1095/"/>
    <id>https://verasince1997.github.io/2022/02/15/pat_basic/pat_basic_1095/</id>
    <published>2022-02-15T02:52:48.537Z</published>
    <updated>2022-02-15T06:37:52.712Z</updated>
    
    <content type="html"><![CDATA[<p>PAT 准考证号由 4 部分组成：</p><ul><li>第 1 位是级别，即 <code>T</code> 代表顶级；<code>A</code> 代表甲级；<code>B</code> 代表乙级；</li><li>第 2~4 位是考场编号，范围从 101 到 999；</li><li>第 5~10 位是考试日期，格式为年、月、日顺次各占 2 位；</li><li>最后 11~13 位是考生编号，范围从 000 到 999。</li></ul><p>现给定一系列考生的准考证号和他们的成绩，请你按照要求输出各种统计信息。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式：</h4><p>输入首先在一行中给出两个正整数 <em>N</em>（≤104）和 <em>M</em>（≤100），分别为考生人数和统计要求的个数。</p><p>接下来 <em>N</em> 行，每行给出一个考生的准考证号和其分数（在区间 [0,100] 内的整数），其间以空格分隔。</p><p>考生信息之后，再给出 <em>M</em> 行，每行给出一个统计要求，格式为：<code>类型 指令</code>，其中</p><ul><li><code>类型</code> 为 1 表示要求按分数非升序输出某个指定级别的考生的成绩，对应的 <code>指令</code> 则给出代表指定级别的字母；</li><li><code>类型</code> 为 2 表示要求将某指定考场的考生人数和总分统计输出，对应的 <code>指令</code> 则给出指定考场的编号；</li><li><code>类型</code> 为 3 表示要求将某指定日期的考生人数分考场统计输出，对应的 <code>指令</code> 则给出指定日期，格式与准考证上日期相同。</li></ul><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式：</h4><p>对每项统计要求，首先在一行中输出 <code>Case #: 要求</code>，其中 <code>#</code> 是该项要求的编号，从 1 开始；<code>要求</code> 即复制输入给出的要求。随后输出相应的统计结果：</p><ul><li><code>类型</code> 为 1 的指令，输出格式与输入的考生信息格式相同，即 <code>准考证号 成绩</code>。对于分数并列的考生，按其准考证号的字典序递增输出（题目保证无重复准考证号）；</li><li><code>类型</code> 为 2 的指令，按 <code>人数 总分</code> 的格式输出；</li><li><code>类型</code> 为 3 的指令，输出按人数非递增顺序，格式为 <code>考场编号 总人数</code>。若人数并列则按考场编号递增顺序输出。</li></ul><p>如果查询结果为空，则输出 <code>NA</code>。</p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span> <span class="number">4</span></span><br><span class="line">B123180908127 <span class="number">99</span></span><br><span class="line">B102180908003 <span class="number">86</span></span><br><span class="line">A112180318002 <span class="number">98</span></span><br><span class="line">T107150310127 <span class="number">62</span></span><br><span class="line">A107180908108 <span class="number">100</span></span><br><span class="line">T123180908010 <span class="number">78</span></span><br><span class="line">B112160918035 <span class="number">88</span></span><br><span class="line">A107180908021 <span class="number">98</span></span><br><span class="line"><span class="number">1</span> A</span><br><span class="line"><span class="number">2</span> <span class="number">107</span></span><br><span class="line"><span class="number">3</span> <span class="number">180908</span></span><br><span class="line"><span class="number">2</span> <span class="number">999</span></span><br></pre></td></tr></table></figure><h3 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Case <span class="number">1</span>: <span class="number">1</span> A</span><br><span class="line">A107180908108 <span class="number">100</span></span><br><span class="line">A107180908021 <span class="number">98</span></span><br><span class="line">A112180318002 <span class="number">98</span></span><br><span class="line">Case <span class="number">2</span>: <span class="number">2</span> <span class="number">107</span></span><br><span class="line"><span class="number">3</span> <span class="number">260</span></span><br><span class="line">Case <span class="number">3</span>: <span class="number">3</span> <span class="number">180908</span></span><br><span class="line"><span class="number">107</span> <span class="number">2</span></span><br><span class="line"><span class="number">123</span> <span class="number">2</span></span><br><span class="line"><span class="number">102</span> <span class="number">1</span></span><br><span class="line">Case <span class="number">4</span>: <span class="number">2</span> <span class="number">999</span></span><br><span class="line">NA</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> iid,room,date,number,score;</span><br><span class="line">    <span class="keyword">char</span> level;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">new_node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nodes</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> iid;</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(Node a,Node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.score != b.score)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.score&lt;b.score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a.iid&lt;b.iid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp3</span><span class="params">(nodes a, nodes b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.cnt != b.cnt)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.cnt &gt; b.cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.iid &lt; b.iid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,num,count=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    Node v[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">string</span> id;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;id&gt;&gt;v[i].score;<span class="comment">//对id切分 </span></span><br><span class="line">        v[i].iid=id;</span><br><span class="line">        v[i].level=id[<span class="number">0</span>];</span><br><span class="line">        v[i].room=id.substr(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        v[i].date=id.substr(<span class="number">4</span>,<span class="number">6</span>);</span><br><span class="line">        v[i].number=id.substr(<span class="number">10</span>,<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">char</span> c;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Case &quot;</span>&lt;&lt;count&lt;&lt;<span class="string">&quot;: 1 &quot;</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="comment">//遍历数组 把规定level的加入 再排序</span></span><br><span class="line">            <span class="built_in">vector</span>&lt;Node&gt; v1;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(v[i].level==c)&#123;</span><br><span class="line">                    v1.push_back(v[i]);</span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">                <span class="comment">//没有元素</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NA&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sort(v1.begin(),v1.end(),cmp1);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v1.size();i++)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;v1[i].level&lt;&lt;v1[i].room&lt;&lt;v1[i].date&lt;&lt;v1[i].number&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;v1[i].score&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">//统计指定考场的考生人数及总分</span></span><br><span class="line">            <span class="built_in">string</span> str;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Case &quot;</span>&lt;&lt;count&lt;&lt;<span class="string">&quot;: 2 &quot;</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">int</span> cnt=<span class="number">0</span>,room_score=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(v[i].room ==str)&#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    room_score+=stoi(v[i].score);</span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">                <span class="comment">//没有元素</span></span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NA&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;room_score&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//指定日期 分考场 先遍历一次 找到指定日期</span></span><br><span class="line">            <span class="built_in">string</span> dates;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;dates;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Case &quot;</span>&lt;&lt;count&lt;&lt;<span class="string">&quot;: 3 &quot;</span>&lt;&lt;dates&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,new_node&gt;mp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(v[i].date == dates)&#123;<span class="comment">//找到指定日期 但可能有多个考场</span></span><br><span class="line">                mp[v[i].room].cnt++;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">                <span class="comment">//没有元素</span></span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NA&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">vector</span> &lt;nodes&gt; v3;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> it=mp.begin();it!=mp.end();it++)&#123;</span><br><span class="line">                v3.push_back(nodes&#123;it-&gt;first,it-&gt;second.cnt&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            sort(v3.begin(),v3.end(),cmp3);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v3.size();i++)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;v3[i].iid&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;v3[i].cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PAT 准考证号由 4 部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 1 位是级别，即 &lt;code&gt;T&lt;/code&gt; 代表顶级；&lt;code&gt;A&lt;/code&gt; 代表甲级；&lt;code&gt;B&lt;/code&gt; 代表乙级；&lt;/li&gt;
&lt;li&gt;第 2~4 位是考场编号，范围从 101 到 99</summary>
      
    
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/categories/PAT-Basic-Level-Practice/"/>
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/tags/PAT-Basic-Level-Practice/"/>
    
  </entry>
  
  <entry>
    <title>PAT_Basic_1094 谷歌的招聘</title>
    <link href="https://verasince1997.github.io/2022/02/15/pat_basic/pat_basic_1094/"/>
    <id>https://verasince1997.github.io/2022/02/15/pat_basic/pat_basic_1094/</id>
    <published>2022-02-15T01:47:12.576Z</published>
    <updated>2022-02-15T02:34:54.656Z</updated>
    
    <content type="html"><![CDATA[<p>2004 年 7 月，谷歌在硅谷的 101 号公路边竖立了一块巨大的广告牌（如下图）用于招聘。内容超级简单，就是一个以 .com 结尾的网址，而前面的网址是一个 10 位素数，这个素数是自然常数 e 中最早出现的 10 位连续数字。能找出这个素数的人，就可以通过访问谷歌的这个网站进入招聘流程的下一步。</p><p><img src="https://images.ptausercontent.com/57148679-d574-4f49-b048-775c6c07791c.jpg" alt="prime.jpg"></p><p>自然常数 e 是一个著名的超越数，前面若干位写出来是这样的：e = 2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642<strong>7427466391</strong>932003059921… 其中粗体标出的 10 位数就是答案。</p><p>本题要求你编程解决一个更通用的问题：从任一给定的长度为 L 的数字中，找出最早出现的 K 位连续数字所组成的素数。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式：</h4><p>输入在第一行给出 2 个正整数，分别是 L（不超过 1000 的正整数，为数字长度）和 K（小于 10 的正整数）。接下来一行给出一个长度为 L 的正整数 N。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式：</h4><p>在一行中输出 N 中最早出现的 K 位连续数字所组成的素数。如果这样的素数不存在，则输出 <code>404</code>。注意，原始数字中的前导零也计算在位数之内。例如在 200236 中找 4 位素数，0023 算是解；但第一位 2 不能被当成 0002 输出，因为在原始数字中不存在这个 2 的前导零。</p><h4 id="输入样例-1"><a class="markdownIt-Anchor" href="#输入样例-1"></a> 输入样例 1：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span> <span class="number">5</span></span><br><span class="line"><span class="number">23654987725541023819</span></span><br></pre></td></tr></table></figure><h4 id="输出样例-1"><a class="markdownIt-Anchor" href="#输出样例-1"></a> 输出样例 1：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">49877</span></span><br></pre></td></tr></table></figure><h4 id="输入样例-2"><a class="markdownIt-Anchor" href="#输入样例-2"></a> 输入样例 2：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">3</span></span><br><span class="line"><span class="number">2468001680</span></span><br></pre></td></tr></table></figure><h4 id="输出样例-2"><a class="markdownIt-Anchor" href="#输出样例-2"></a> 输出样例 2：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">404</span></span><br></pre></td></tr></table></figure><h4 id="代码-more-"><a class="markdownIt-Anchor" href="#代码-more-"></a> 代码：<span id="more"></span></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试点2</span></span><br><span class="line"><span class="number">6</span> <span class="number">4</span></span><br><span class="line"><span class="number">200236</span> </span><br><span class="line"><span class="number">0023</span></span><br></pre></td></tr></table></figure><p>最初提交的代码，卡了测试点2，4，5；测试点2就是上面这个例子，我本来想用<code>printf(&quot;0kd&quot;,num);</code>来保证不足k位的num前面可以补0(让最终输出的num的长度为k)，但是这个语法不对，k要是具体的数值，以前我输出都是<code>printf(&quot;%04d&quot;,n);</code>1019题就这么用的。所以就把<code>int num=stoi(n.substr(i,k));</code>拆成<code>string str=n.substr(i,k);</code> <code>int num=stoi(str);</code>当num判断为素数，输出str就是。</p><p>另外的错误是我以为2不是素数，所以我写的<code>num&gt;2</code> 但是2是素数，所以改成<code>num&gt;=2</code>就AC了。</p><h4 id="初版本"><a class="markdownIt-Anchor" href="#初版本"></a> 初版本：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(num);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l,k;</span><br><span class="line">    <span class="built_in">string</span> n;<span class="comment">// 6 3 123456 </span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;k&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=l-k;i++)&#123;</span><br><span class="line">        <span class="comment">// 截取5位数</span></span><br><span class="line">    <span class="keyword">int</span> num=stoi(n.substr(i,k));</span><br><span class="line">    <span class="keyword">if</span>(isPrime(num) &amp;&amp; num&gt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;num;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;404&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ac"><a class="markdownIt-Anchor" href="#ac"></a> AC:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(num);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l,k;</span><br><span class="line">    <span class="built_in">string</span> n;<span class="comment">// 6 3 123456 </span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;k&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=l-k;i++)&#123;</span><br><span class="line">    <span class="comment">// 截取k位数</span></span><br><span class="line">    <span class="built_in">string</span> str=n.substr(i,k);</span><br><span class="line">    <span class="keyword">int</span> num=stoi(str);</span><br><span class="line">    <span class="keyword">if</span>(isPrime(num) &amp;&amp; num&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;str;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;404&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;2004 年 7 月，谷歌在硅谷的 101 号公路边竖立了一块巨大的广告牌（如下图）用于招聘。内容超级简单，就是一个以 .com 结尾的网址，而前面的网址是一个 10 位素数，这个素数是自然常数 e 中最早出现的 10 位连续数字。能找出这个素数的人，就可以通过访问谷歌的这个网站进入招聘流程的下一步。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.ptausercontent.com/57148679-d574-4f49-b048-775c6c07791c.jpg&quot; alt=&quot;prime.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;自然常数 e 是一个著名的超越数，前面若干位写出来是这样的：e = 2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642&lt;strong&gt;7427466391&lt;/strong&gt;932003059921… 其中粗体标出的 10 位数就是答案。&lt;/p&gt;
&lt;p&gt;本题要求你编程解决一个更通用的问题：从任一给定的长度为 L 的数字中，找出最早出现的 K 位连续数字所组成的素数。&lt;/p&gt;
&lt;h4 id=&quot;输入格式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入格式&quot;&gt;&lt;/a&gt; 输入格式：&lt;/h4&gt;
&lt;p&gt;输入在第一行给出 2 个正整数，分别是 L（不超过 1000 的正整数，为数字长度）和 K（小于 10 的正整数）。接下来一行给出一个长度为 L 的正整数 N。&lt;/p&gt;
&lt;h4 id=&quot;输出格式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输出格式&quot;&gt;&lt;/a&gt; 输出格式：&lt;/h4&gt;
&lt;p&gt;在一行中输出 N 中最早出现的 K 位连续数字所组成的素数。如果这样的素数不存在，则输出 &lt;code&gt;404&lt;/code&gt;。注意，原始数字中的前导零也计算在位数之内。例如在 200236 中找 4 位素数，0023 算是解；但第一位 2 不能被当成 0002 输出，因为在原始数字中不存在这个 2 的前导零。&lt;/p&gt;
&lt;h4 id=&quot;输入样例-1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入样例-1&quot;&gt;&lt;/a&gt; 输入样例 1：&lt;/h4&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;23654987725541023819&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;输出样例-1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输出样例-1&quot;&gt;&lt;/a&gt; 输出样例 1：&lt;/h4&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;49877&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;输入样例-2&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入样例-2&quot;&gt;&lt;/a&gt; 输入样例 2：&lt;/h4&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2468001680&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;输出样例-2&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输出样例-2&quot;&gt;&lt;/a&gt; 输出样例 2：&lt;/h4&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;404&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;代码-more-&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#代码-more-&quot;&gt;&lt;/a&gt; 代码：&lt;/h4&gt;</summary>
    
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/categories/PAT-Basic-Level-Practice/"/>
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/tags/PAT-Basic-Level-Practice/"/>
    
  </entry>
  
  <entry>
    <title>PAT_Basic_1093 字符串A+B</title>
    <link href="https://verasince1997.github.io/2022/02/15/pat_basic/pat_basic_1093/"/>
    <id>https://verasince1997.github.io/2022/02/15/pat_basic/pat_basic_1093/</id>
    <published>2022-02-15T01:37:14.399Z</published>
    <updated>2022-02-15T02:31:59.939Z</updated>
    
    <content type="html"><![CDATA[<p>给定两个字符串 <em>A</em> 和 <em>B</em>，本题要求你输出 <em>A</em>+<em>B</em>，即两个字符串的并集。要求先输出 <em>A</em>，再输出 <em>B</em>，但<strong>重复的字符必须被剔除</strong>。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式：</h4><p>输入在两行中分别给出 <em>A</em> 和 <em>B</em>，均为长度不超过 106的、由可见 ASCII 字符 (即码值为32~126)和空格组成的、由回车标识结束的非空字符串。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式：</h4><p>在一行中输出题面要求的 <em>A</em> 和 <em>B</em> 的和。</p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This is a sample test</span><br><span class="line">to show you_How it works</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This ampletowyu_Hrk</span><br></pre></td></tr></table></figure><h4 id="代码-more-"><a class="markdownIt-Anchor" href="#代码-more-"></a> 代码：<span id="more"></span></h4><h4 id="初版本"><a class="markdownIt-Anchor" href="#初版本"></a> 初版本：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a,b,str;</span><br><span class="line">    getline(<span class="built_in">cin</span>,a);</span><br><span class="line">    getline(<span class="built_in">cin</span>,b);</span><br><span class="line">    str = a+b;</span><br><span class="line">    <span class="built_in">set</span> &lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)&#123;</span><br><span class="line">        s.insert(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  遍历str 按照顺序输出 set里是不重复的字符 遍历str 输出第一个出现的字符</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.find(str[i])!=s.end())&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;str[i];</span><br><span class="line">            s.erase(str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更好的方法，而且是以前我强调过的方法。用hash打表。</p><h4 id="hash散列"><a class="markdownIt-Anchor" href="#hash散列"></a> hash散列：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a,b,str;</span><br><span class="line">    getline(<span class="built_in">cin</span>,a);</span><br><span class="line">    getline(<span class="built_in">cin</span>,b);</span><br><span class="line">    str = a+b;</span><br><span class="line">    <span class="comment">//使用hash 是最简单的方法 1048也是这个思想</span></span><br><span class="line">    <span class="comment">// 只输出第一次出现的字符 后面与之重复的就不输出了</span></span><br><span class="line">    <span class="keyword">int</span> hash[<span class="number">200</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(hash[str[i]]==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;str[i];</span><br><span class="line">        hash[str[i]]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;给定两个字符串 &lt;em&gt;A&lt;/em&gt; 和 &lt;em&gt;B&lt;/em&gt;，本题要求你输出 &lt;em&gt;A&lt;/em&gt;+&lt;em&gt;B&lt;/em&gt;，即两个字符串的并集。要求先输出 &lt;em&gt;A&lt;/em&gt;，再输出 &lt;em&gt;B&lt;/em&gt;，但&lt;strong&gt;重复的字符必须被剔除&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;输入格式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入格式&quot;&gt;&lt;/a&gt; 输入格式：&lt;/h4&gt;
&lt;p&gt;输入在两行中分别给出 &lt;em&gt;A&lt;/em&gt; 和 &lt;em&gt;B&lt;/em&gt;，均为长度不超过 106的、由可见 ASCII 字符 (即码值为32~126)和空格组成的、由回车标识结束的非空字符串。&lt;/p&gt;
&lt;h4 id=&quot;输出格式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输出格式&quot;&gt;&lt;/a&gt; 输出格式：&lt;/h4&gt;
&lt;p&gt;在一行中输出题面要求的 &lt;em&gt;A&lt;/em&gt; 和 &lt;em&gt;B&lt;/em&gt; 的和。&lt;/p&gt;
&lt;h4 id=&quot;输入样例&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入样例&quot;&gt;&lt;/a&gt; 输入样例：&lt;/h4&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;This is a sample test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;to show you_How it works&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;输出样例&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输出样例&quot;&gt;&lt;/a&gt; 输出样例：&lt;/h4&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;This ampletowyu_Hrk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;代码-more-&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#代码-more-&quot;&gt;&lt;/a&gt; 代码：&lt;/h4&gt;</summary>
    
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/categories/PAT-Basic-Level-Practice/"/>
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/tags/PAT-Basic-Level-Practice/"/>
    
  </entry>
  
  <entry>
    <title>PAT_Basic_1092 最好吃的月饼</title>
    <link href="https://verasince1997.github.io/2022/02/14/pat_basic/pat_basic_1092/"/>
    <id>https://verasince1997.github.io/2022/02/14/pat_basic/pat_basic_1092/</id>
    <published>2022-02-14T14:00:08.834Z</published>
    <updated>2022-02-15T02:32:41.618Z</updated>
    
    <content type="html"><![CDATA[<p>月饼是久负盛名的中国传统糕点之一，自唐朝以来，已经发展出几百品种。</p><p><img src="https://images.ptausercontent.com/fcb325a0-7090-4bf4-acb0-d4d7ea832f27.jpg" alt="mk.jpg"></p><p>若想评比出一种“最好吃”的月饼，那势必在吃货界引发一场腥风血雨…… 在这里我们用数字说话，给出全国各地各种月饼的销量，要求你从中找出销量冠军，认定为最好吃的月饼。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式：</h4><p>输入首先给出两个正整数 <em>N</em>（≤1000）和 <em>M</em>（≤100），分别为月饼的种类数（于是默认月饼种类从 1 到 <em>N</em> 编号）和参与统计的城市数量。</p><p>接下来 <em>M</em> 行，每行给出 <em>N</em> 个非负整数（均不超过 1 百万），其中第 <em>i</em> 个整数为第 <em>i</em> 种月饼的销量（块）。数字间以空格分隔。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式：</h4><p>在第一行中输出最大销量，第二行输出销量最大的月饼的种类编号。如果冠军不唯一，则按编号递增顺序输出并列冠军。数字间以 1 个空格分隔，行首尾不得有多余空格。</p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">1001</span> <span class="number">992</span> <span class="number">0</span> <span class="number">233</span> <span class="number">6</span></span><br><span class="line"><span class="number">8</span> <span class="number">0</span> <span class="number">2018</span> <span class="number">0</span> <span class="number">2008</span></span><br><span class="line"><span class="number">36</span> <span class="number">18</span> <span class="number">0</span> <span class="number">1024</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码：</h4><p>最开始测试点2没过。</p><span id="more"></span><h4 id="初版本"><a class="markdownIt-Anchor" href="#初版本"></a> 初版本：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">int</span> amount;</span><br><span class="line">&#125;node[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node a,Node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.amount != b.amount)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.amount &gt; b.amount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.id&lt;b.id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,count;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;count;</span><br><span class="line">            node[j].amount+=count;</span><br><span class="line">            node[j].id=j+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(node,node+<span class="number">1001</span>,cmp);</span><br><span class="line">    <span class="keyword">int</span> flag=node[<span class="number">0</span>].amount;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;flag&lt;&lt;<span class="built_in">endl</span>&lt;&lt;node[<span class="number">0</span>].id;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1001</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node[i].amount &lt; flag)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node[i].amount == flag)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;node[i].id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写题最讨厌思路是对的，就是一个很小的细节导致卡某个测试点，我把sort函数里<code>sort(node,node+1001,cmp);</code>修改为<code>sort(node,node+n,cmp);</code> 就AC了。其实这个问题是老问题，这次害得我找bug找了这么久，我最开始写sort的第二个参数就心虚，不知道写多少，但是node不就是记录月饼的种类嘛，不就n种嘛，所以第二个参数是<code>node+n</code>；还有最后输出的时候，<code>for(int i=1;i&lt;n;i++)</code>，也是n，希望下次不要浪费时间在类似问题上。</p><h4 id="ac"><a class="markdownIt-Anchor" href="#ac"></a> AC：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> amount=<span class="number">0</span>;</span><br><span class="line">&#125;node[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node a,Node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.amount != b.amount)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.amount &gt; b.amount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.id&lt;b.id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,count;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;count;</span><br><span class="line">            node[j].amount+=count;</span><br><span class="line">            node[j].id=j+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(node,node+n,cmp);</span><br><span class="line">    <span class="keyword">int</span> flag=node[<span class="number">0</span>].amount;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;flag&lt;&lt;<span class="built_in">endl</span>&lt;&lt;node[<span class="number">0</span>].id;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node[i].amount != flag)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;node[i].id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;月饼是久负盛名的中国传统糕点之一，自唐朝以来，已经发展出几百品种。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.ptausercontent.com/fcb325a0-7090-4bf4-acb0-d4d7ea832f27.jpg&quot; alt=&quot;mk.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;若想评比出一种“最好吃”的月饼，那势必在吃货界引发一场腥风血雨…… 在这里我们用数字说话，给出全国各地各种月饼的销量，要求你从中找出销量冠军，认定为最好吃的月饼。&lt;/p&gt;
&lt;h4 id=&quot;输入格式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入格式&quot;&gt;&lt;/a&gt; 输入格式：&lt;/h4&gt;
&lt;p&gt;输入首先给出两个正整数 &lt;em&gt;N&lt;/em&gt;（≤1000）和 &lt;em&gt;M&lt;/em&gt;（≤100），分别为月饼的种类数（于是默认月饼种类从 1 到 &lt;em&gt;N&lt;/em&gt; 编号）和参与统计的城市数量。&lt;/p&gt;
&lt;p&gt;接下来 &lt;em&gt;M&lt;/em&gt; 行，每行给出 &lt;em&gt;N&lt;/em&gt; 个非负整数（均不超过 1 百万），其中第 &lt;em&gt;i&lt;/em&gt; 个整数为第 &lt;em&gt;i&lt;/em&gt; 种月饼的销量（块）。数字间以空格分隔。&lt;/p&gt;
&lt;h4 id=&quot;输出格式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输出格式&quot;&gt;&lt;/a&gt; 输出格式：&lt;/h4&gt;
&lt;p&gt;在第一行中输出最大销量，第二行输出销量最大的月饼的种类编号。如果冠军不唯一，则按编号递增顺序输出并列冠军。数字间以 1 个空格分隔，行首尾不得有多余空格。&lt;/p&gt;
&lt;h4 id=&quot;输入样例&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入样例&quot;&gt;&lt;/a&gt; 输入样例：&lt;/h4&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1001&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;992&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;233&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2018&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2008&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;36&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;输出样例&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输出样例&quot;&gt;&lt;/a&gt; 输出样例：&lt;/h4&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2018&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;代码&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#代码&quot;&gt;&lt;/a&gt; 代码：&lt;/h4&gt;
&lt;p&gt;最开始测试点2没过。&lt;/p&gt;</summary>
    
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/categories/PAT-Basic-Level-Practice/"/>
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/tags/PAT-Basic-Level-Practice/"/>
    
  </entry>
  
  <entry>
    <title>PAT_Basic_1091 N-自守数</title>
    <link href="https://verasince1997.github.io/2022/02/14/pat_basic/pat_basic_1091/"/>
    <id>https://verasince1997.github.io/2022/02/14/pat_basic/pat_basic_1091/</id>
    <published>2022-02-14T13:33:57.651Z</published>
    <updated>2022-02-14T14:00:36.206Z</updated>
    
    <content type="html"><![CDATA[<p>如果某个数 <em>K</em> 的平方乘以 <em>N</em> 以后，结果的末尾几位数等于 <em>K</em>，那么就称这个数为“<em>N</em>-自守数”。例如 3×922=25392，而 25392 的末尾两位正好是 92，所以 92 是一个 3-自守数。</p><p>本题就请你编写程序判断一个给定的数字是否关于某个 <em>N</em> 是 <em>N</em>-自守数。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式：</h4><p>输入在第一行中给出正整数 <em>M</em>（≤20），随后一行给出 <em>M</em> 个待检测的、不超过 1000 的正整数。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式：</h4><p>对每个需要检测的数字，如果它是 <em>N</em>-自守数就在一行中输出最小的 <em>N</em> 和 <em>N**K</em>2 的值，以一个空格隔开；否则输出 <code>No</code>。注意题目保证 <em>N</em>&lt;10。</p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">92</span> <span class="number">5</span> <span class="number">233</span></span><br></pre></td></tr></table></figure><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">25392</span></span><br><span class="line"><span class="number">1</span> <span class="number">25</span></span><br><span class="line">No</span><br></pre></td></tr></table></figure><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路：</h4><p>字符串的处理是乙级的老顾客，用了截取函数。截取乘积结果(转为字符串)的后x位，其中x为输入正整数的位数，比较正整数(转为字符串)和截取得到的字符串是否相同。</p><span id="more"></span><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,num;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> str_num =to_string(num);</span><br><span class="line">        <span class="keyword">int</span> a = str_num.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">1</span>;n&lt;<span class="number">10</span>;n++)&#123;</span><br><span class="line">           <span class="built_in">string</span> str= to_string((<span class="keyword">int</span>)<span class="built_in">pow</span>(num,<span class="number">2</span>)*n);</span><br><span class="line">           <span class="keyword">int</span> b=str.length();</span><br><span class="line">        <span class="comment">//截取 92 25392</span></span><br><span class="line">        <span class="keyword">if</span> (str.substr(b-a) == str_num)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;如果某个数 &lt;em&gt;K&lt;/em&gt; 的平方乘以 &lt;em&gt;N&lt;/em&gt; 以后，结果的末尾几位数等于 &lt;em&gt;K&lt;/em&gt;，那么就称这个数为“&lt;em&gt;N&lt;/em&gt;-自守数”。例如 3×922=25392，而 25392 的末尾两位正好是 92，所以 92 是一个 3-自守数。&lt;/p&gt;
&lt;p&gt;本题就请你编写程序判断一个给定的数字是否关于某个 &lt;em&gt;N&lt;/em&gt; 是 &lt;em&gt;N&lt;/em&gt;-自守数。&lt;/p&gt;
&lt;h4 id=&quot;输入格式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入格式&quot;&gt;&lt;/a&gt; 输入格式：&lt;/h4&gt;
&lt;p&gt;输入在第一行中给出正整数 &lt;em&gt;M&lt;/em&gt;（≤20），随后一行给出 &lt;em&gt;M&lt;/em&gt; 个待检测的、不超过 1000 的正整数。&lt;/p&gt;
&lt;h4 id=&quot;输出格式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输出格式&quot;&gt;&lt;/a&gt; 输出格式：&lt;/h4&gt;
&lt;p&gt;对每个需要检测的数字，如果它是 &lt;em&gt;N&lt;/em&gt;-自守数就在一行中输出最小的 &lt;em&gt;N&lt;/em&gt; 和 &lt;em&gt;N**K&lt;/em&gt;2 的值，以一个空格隔开；否则输出 &lt;code&gt;No&lt;/code&gt;。注意题目保证 &lt;em&gt;N&lt;/em&gt;&amp;lt;10。&lt;/p&gt;
&lt;h4 id=&quot;输入样例&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入样例&quot;&gt;&lt;/a&gt; 输入样例：&lt;/h4&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;92&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;233&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;输出样例&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输出样例&quot;&gt;&lt;/a&gt; 输出样例：&lt;/h4&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25392&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;No&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;思路&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#思路&quot;&gt;&lt;/a&gt; 思路：&lt;/h4&gt;
&lt;p&gt;字符串的处理是乙级的老顾客，用了截取函数。截取乘积结果(转为字符串)的后x位，其中x为输入正整数的位数，比较正整数(转为字符串)和截取得到的字符串是否相同。&lt;/p&gt;</summary>
    
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/categories/PAT-Basic-Level-Practice/"/>
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/tags/PAT-Basic-Level-Practice/"/>
    
  </entry>
  
  <entry>
    <title>PAT_Basic_1090 危险品装箱</title>
    <link href="https://verasince1997.github.io/2022/02/14/pat_basic/pat_basic_1090/"/>
    <id>https://verasince1997.github.io/2022/02/14/pat_basic/pat_basic_1090/</id>
    <published>2022-02-14T12:32:22.507Z</published>
    <updated>2022-02-14T13:28:46.222Z</updated>
    
    <content type="html"><![CDATA[<p>集装箱运输货物时，我们必须特别小心，不能把不相容的货物装在一只箱子里。比如氧化剂绝对不能跟易燃液体同箱，否则很容易造成爆炸。</p><p>本题给定一张不相容物品的清单，需要你检查每一张集装箱货品清单，判断它们是否能装在同一只箱子里。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式：</h4><p>输入第一行给出两个正整数：<em>N</em> (≤104) 是成对的不相容物品的对数；<em>M</em> (≤100) 是集装箱货品清单的单数。</p><p>随后数据分两大块给出。第一块有 <em>N</em> 行，每行给出一对不相容的物品。第二块有 <em>M</em> 行，每行给出一箱货物的清单，格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K G[1] G[2] ... G[K]</span><br></pre></td></tr></table></figure><p>其中 <code>K</code> (≤1000) 是物品件数，<code>G[i]</code> 是物品的编号。简单起见，每件物品用一个 5 位数的编号代表。两个数字之间用空格分隔。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式：</h4><p>对每箱货物清单，判断是否可以安全运输。如果没有不相容物品，则在一行中输出 <code>Yes</code>，否则输出 <code>No</code>。</p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">6 3</span><br><span class="line">20001 20002</span><br><span class="line">20003 20004</span><br><span class="line">20005 20006</span><br><span class="line">20003 20001</span><br><span class="line">20005 20004</span><br><span class="line">20004 20006</span><br><span class="line">4 00001 20004 00002 20003</span><br><span class="line">5 98823 20002 20003 20006 10010</span><br><span class="line">3 12345 67890 23333</span><br></pre></td></tr></table></figure><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">No</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路：</h4><p>通过这道题学到了map的it-&gt;second可以是vector结构，之前1080和1085是it-&gt;second是结构体类型。并且使用一个数组a标记vector中的每个元素是否存在，这个技巧第一次见。<span id="more"></span></p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,num;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;mp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        mp[a].push_back(b);</span><br><span class="line">        mp[b].push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">        <span class="keyword">int</span> id[<span class="number">1001</span>]=&#123;&#125;,a[<span class="number">100001</span>]=&#123;&#125;;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;id[j];</span><br><span class="line">            a[id[j]]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输完了 来判断</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;num;k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;mp[id[k]].size();p++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[mp[id[k]][p]]==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//找到不相容的物品</span></span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;集装箱运输货物时，我们必须特别小心，不能把不相容的货物装在一只箱子里。比如氧化剂绝对不能跟易燃液体同箱，否则很容易造成爆炸。&lt;/p&gt;
&lt;p&gt;本题给定一张不相容物品的清单，需要你检查每一张集装箱货品清单，判断它们是否能装在同一只箱子里。&lt;/p&gt;
&lt;h4 id=&quot;输入格式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入格式&quot;&gt;&lt;/a&gt; 输入格式：&lt;/h4&gt;
&lt;p&gt;输入第一行给出两个正整数：&lt;em&gt;N&lt;/em&gt; (≤104) 是成对的不相容物品的对数；&lt;em&gt;M&lt;/em&gt; (≤100) 是集装箱货品清单的单数。&lt;/p&gt;
&lt;p&gt;随后数据分两大块给出。第一块有 &lt;em&gt;N&lt;/em&gt; 行，每行给出一对不相容的物品。第二块有 &lt;em&gt;M&lt;/em&gt; 行，每行给出一箱货物的清单，格式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;K G[1] G[2] ... G[K]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中 &lt;code&gt;K&lt;/code&gt; (≤1000) 是物品件数，&lt;code&gt;G[i]&lt;/code&gt; 是物品的编号。简单起见，每件物品用一个 5 位数的编号代表。两个数字之间用空格分隔。&lt;/p&gt;
&lt;h4 id=&quot;输出格式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输出格式&quot;&gt;&lt;/a&gt; 输出格式：&lt;/h4&gt;
&lt;p&gt;对每箱货物清单，判断是否可以安全运输。如果没有不相容物品，则在一行中输出 &lt;code&gt;Yes&lt;/code&gt;，否则输出 &lt;code&gt;No&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;输入样例&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入样例&quot;&gt;&lt;/a&gt; 输入样例：&lt;/h4&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;6 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20001 20002&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20003 20004&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20005 20006&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20003 20001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20005 20004&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20004 20006&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4 00001 20004 00002 20003&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5 98823 20002 20003 20006 10010&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 12345 67890 23333&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;输出样例&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输出样例&quot;&gt;&lt;/a&gt; 输出样例：&lt;/h4&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;No&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Yes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;思路&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#思路&quot;&gt;&lt;/a&gt; 思路：&lt;/h4&gt;
&lt;p&gt;通过这道题学到了map的it-&amp;gt;second可以是vector结构，之前1080和1085是it-&amp;gt;second是结构体类型。并且使用一个数组a标记vector中的每个元素是否存在，这个技巧第一次见。&lt;/p&gt;</summary>
    
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/categories/PAT-Basic-Level-Practice/"/>
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/tags/PAT-Basic-Level-Practice/"/>
    
  </entry>
  
  <entry>
    <title>PAT_Basic_1089 狼人杀-简单版</title>
    <link href="https://verasince1997.github.io/2022/02/14/pat_basic/pat_basic_1089/"/>
    <id>https://verasince1997.github.io/2022/02/14/pat_basic/pat_basic_1089/</id>
    <published>2022-02-14T12:19:17.988Z</published>
    <updated>2022-02-15T02:33:46.972Z</updated>
    
    <content type="html"><![CDATA[<p>以下文字摘自《灵机一动·好玩的数学》：“狼人杀”游戏分为狼人、好人两大阵营。在一局“狼人杀”游戏中，1 号玩家说：“2 号是狼人”，2 号玩家说：“3 号是好人”，3 号玩家说：“4 号是狼人”，4 号玩家说：“5 号是好人”，5 号玩家说：“4 号是好人”。已知这 5 名玩家中有 2 人扮演狼人角色，有 2 人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。扮演狼人角色的是哪两号玩家？</p><p>本题是这个问题的升级版：已知 <em>N</em> 名玩家中有 2 人扮演狼人角色，有 2 人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。要求你找出扮演狼人角色的是哪几号玩家？</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式：</h4><p>输入在第一行中给出一个正整数 <em>N</em>（5≤<em>N</em>≤100）。随后 <em>N</em> 行，第 <em>i</em> 行给出第 <em>i</em> 号玩家说的话（1≤<em>i</em>≤<em>N</em>），即一个玩家编号，用正号表示好人，负号表示狼人。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式：</h4><p>如果有解，在一行中按递增顺序输出 2 个狼人的编号，其间以空格分隔，行首尾不得有多余空格。如果解不唯一，则输出最小序列解 —— 即对于两个序列 <em>A</em>=<em>a</em>[1],…,<em>a</em>[<em>M</em>] 和 <em>B</em>=<em>b</em>[1],…,<em>b</em>[<em>M</em>]，若存在 0≤<em>k</em>&lt;<em>M</em> 使得 <em>a</em>[<em>i</em>]=<em>b</em>[<em>i</em>] （<em>i</em>≤<em>k</em>），且 <em>a</em>[<em>k</em>+1]&lt;<em>b</em>[<em>k</em>+1]，则称序列 <em>A</em> 小于序列 <em>B</em>。若无解则输出 <code>No Solution</code>。</p><h4 id="输入样例-1"><a class="markdownIt-Anchor" href="#输入样例-1"></a> 输入样例 1：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">-2</span><br><span class="line">+3</span><br><span class="line">-4</span><br><span class="line">+5</span><br><span class="line">+4</span><br></pre></td></tr></table></figure><h4 id="输出样例-1"><a class="markdownIt-Anchor" href="#输出样例-1"></a> 输出样例 1：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 4</span><br></pre></td></tr></table></figure><h4 id="输入样例-2"><a class="markdownIt-Anchor" href="#输入样例-2"></a> 输入样例 2：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">+6</span><br><span class="line">+3</span><br><span class="line">+1</span><br><span class="line">-5</span><br><span class="line">-2</span><br><span class="line">+4</span><br></pre></td></tr></table></figure><h4 id="输出样例-2解不唯一"><a class="markdownIt-Anchor" href="#输出样例-2解不唯一"></a> 输出样例 2（解不唯一）：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 5</span><br></pre></td></tr></table></figure><h4 id="输入样例-3"><a class="markdownIt-Anchor" href="#输入样例-3"></a> 输入样例 3：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">-2</span><br><span class="line">-3</span><br><span class="line">-4</span><br><span class="line">-5</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><h4 id="输出样例-3"><a class="markdownIt-Anchor" href="#输出样例-3"></a> 输出样例 3：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No Solution</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vec</span><span class="params">(N+<span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; vec[i];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">goodMan</span><span class="params">(N+<span class="number">1</span>, <span class="number">1</span>)</span></span>;<span class="comment">//goodMan[i]==1表示i号是好人 </span></span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= N<span class="number">-1</span>; ++i)&#123;</span><br><span class="line"><span class="comment">//标记i号为狼 </span></span><br><span class="line">goodMan[i] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(j = i+<span class="number">1</span>; j &lt;= N; ++j)&#123;</span><br><span class="line"><span class="comment">//标记j号为狼 </span></span><br><span class="line">goodMan[j] = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//记录说谎次数，狼人数量 </span></span><br><span class="line"><span class="keyword">int</span> liesCnt = <span class="number">0</span>, wolfCnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= N; ++k)&#123;</span><br><span class="line"><span class="comment">//vec[k]表示k号认为：abs(vec[k])号是狼人(vec[k]&lt;0) or 好人(vec[k]&gt;0) </span></span><br><span class="line"><span class="comment">//goodMan[abs(vec[k])] abs(vec[k])到底是狼人(-1) or 好人(1)</span></span><br><span class="line"><span class="comment">//若乘积为负说明说谎 </span></span><br><span class="line"><span class="keyword">if</span>( goodMan[<span class="built_in">abs</span>(vec[k])] * vec[k] &lt; <span class="number">0</span> )&#123;</span><br><span class="line">liesCnt++;</span><br><span class="line"><span class="comment">//k号恰好标记为狼人 </span></span><br><span class="line"><span class="keyword">if</span>( k == i || k == j )</span><br><span class="line">wolfCnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( liesCnt == <span class="number">2</span> &amp;&amp; wolfCnt == <span class="number">1</span> )&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; j;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">goodMan[j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">goodMan[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No Solution&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的代码，较上面还是麻烦了许多，只需要判断说谎人数为2和有一个狼人说谎。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> state[n+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span> &gt;&gt; state[i];<span class="comment">//int数组记录每个人说的话</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123; <span class="comment">//双重循环假设i和j是狼人</span></span><br><span class="line"><span class="keyword">int</span> liewolf=<span class="number">0</span>,lieman=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123; <span class="comment">//循环k判断所有人说的话和假设的情况的符合程度</span></span><br><span class="line"><span class="keyword">if</span>(k==i||k==j)&#123; <span class="comment">//如果k是狼人</span></span><br><span class="line"><span class="keyword">if</span>((<span class="built_in">abs</span>(state[k])==i||<span class="built_in">abs</span>(state[k])==j)&amp;&amp;state[k]&gt;<span class="number">0</span>) liewolf++; <span class="comment">//k描述的那个人是狼人但他却说他人 k说谎 狼人说谎数+1</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(state[k])!=i&amp;&amp;<span class="built_in">abs</span>(state[k])!=j&amp;&amp;state[k]&lt;<span class="number">0</span>) liewolf++; <span class="comment">//k描述的人是人但他却说他是狼人 k说谎 狼人说谎数+1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123; <span class="comment">//如果k是人</span></span><br><span class="line"><span class="keyword">if</span>((<span class="built_in">abs</span>(state[k])==i||<span class="built_in">abs</span>(state[k])==j)&amp;&amp;state[k]&gt;<span class="number">0</span>) lieman++; <span class="comment">//k描述的那个人是狼人但他却说他是人  k说谎 人说谎数+1</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(state[k])!=i&amp;&amp;<span class="built_in">abs</span>(state[k])!=j&amp;&amp;state[k]&lt;<span class="number">0</span>) lieman++; <span class="comment">//k描述的那个人是人但他却说他是狼人 k说谎 人说谎数+1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(liewolf==<span class="number">1</span>&amp;&amp;lieman==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; j; <span class="comment">//每次k循环结束都判断人的说谎数和狼的说谎数，如果都刚好是1则表示当前的假设是对的 否则就进行下一次假设</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No Solution&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;以下文字摘自《灵机一动·好玩的数学》：“狼人杀”游戏分为狼人、好人两大阵营。在一局“狼人杀”游戏中，1 号玩家说：“2 号是狼人”，2 号玩家说：“3 号是好人”，3 号玩家说：“4 号是狼人”，4 号玩家说：“5 号是好人”，5 号玩家说：“4 号是好人”。已知这 5 名玩家中有 2 人扮演狼人角色，有 2 人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。扮演狼人角色的是哪两号玩家？&lt;/p&gt;
&lt;p&gt;本题是这个问题的升级版：已知 &lt;em&gt;N&lt;/em&gt; 名玩家中有 2 人扮演狼人角色，有 2 人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。要求你找出扮演狼人角色的是哪几号玩家？&lt;/p&gt;
&lt;h4 id=&quot;输入格式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入格式&quot;&gt;&lt;/a&gt; 输入格式：&lt;/h4&gt;
&lt;p&gt;输入在第一行中给出一个正整数 &lt;em&gt;N&lt;/em&gt;（5≤&lt;em&gt;N&lt;/em&gt;≤100）。随后 &lt;em&gt;N&lt;/em&gt; 行，第 &lt;em&gt;i&lt;/em&gt; 行给出第 &lt;em&gt;i&lt;/em&gt; 号玩家说的话（1≤&lt;em&gt;i&lt;/em&gt;≤&lt;em&gt;N&lt;/em&gt;），即一个玩家编号，用正号表示好人，负号表示狼人。&lt;/p&gt;
&lt;h4 id=&quot;输出格式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输出格式&quot;&gt;&lt;/a&gt; 输出格式：&lt;/h4&gt;
&lt;p&gt;如果有解，在一行中按递增顺序输出 2 个狼人的编号，其间以空格分隔，行首尾不得有多余空格。如果解不唯一，则输出最小序列解 —— 即对于两个序列 &lt;em&gt;A&lt;/em&gt;=&lt;em&gt;a&lt;/em&gt;[1],…,&lt;em&gt;a&lt;/em&gt;[&lt;em&gt;M&lt;/em&gt;] 和 &lt;em&gt;B&lt;/em&gt;=&lt;em&gt;b&lt;/em&gt;[1],…,&lt;em&gt;b&lt;/em&gt;[&lt;em&gt;M&lt;/em&gt;]，若存在 0≤&lt;em&gt;k&lt;/em&gt;&amp;lt;&lt;em&gt;M&lt;/em&gt; 使得 &lt;em&gt;a&lt;/em&gt;[&lt;em&gt;i&lt;/em&gt;]=&lt;em&gt;b&lt;/em&gt;[&lt;em&gt;i&lt;/em&gt;] （&lt;em&gt;i&lt;/em&gt;≤&lt;em&gt;k&lt;/em&gt;），且 &lt;em&gt;a&lt;/em&gt;[&lt;em&gt;k&lt;/em&gt;+1]&amp;lt;&lt;em&gt;b&lt;/em&gt;[&lt;em&gt;k&lt;/em&gt;+1]，则称序列 &lt;em&gt;A&lt;/em&gt; 小于序列 &lt;em&gt;B&lt;/em&gt;。若无解则输出 &lt;code&gt;No Solution&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;输入样例-1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入样例-1&quot;&gt;&lt;/a&gt; 输入样例 1：&lt;/h4&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;输出样例-1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输出样例-1&quot;&gt;&lt;/a&gt; 输出样例 1：&lt;/h4&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1 4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;输入样例-2&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入样例-2&quot;&gt;&lt;/a&gt; 输入样例 2：&lt;/h4&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;输出样例-2解不唯一&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输出样例-2解不唯一&quot;&gt;&lt;/a&gt; 输出样例 2（解不唯一）：&lt;/h4&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1 5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;输入样例-3&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入样例-3&quot;&gt;&lt;/a&gt; 输入样例 3：&lt;/h4&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;输出样例-3&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输出样例-3&quot;&gt;&lt;/a&gt; 输出样例 3：&lt;/h4&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;No Solution&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/categories/PAT-Basic-Level-Practice/"/>
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/tags/PAT-Basic-Level-Practice/"/>
    
  </entry>
  
  <entry>
    <title>PAT_Basic_1088 三人行</title>
    <link href="https://verasince1997.github.io/2022/02/13/pat_basic/pat_basic_1088/"/>
    <id>https://verasince1997.github.io/2022/02/13/pat_basic/pat_basic_1088/</id>
    <published>2022-02-13T14:52:09.279Z</published>
    <updated>2022-02-15T02:34:19.401Z</updated>
    
    <content type="html"><![CDATA[<p>子曰：“三人行，必有我师焉。择其善者而从之，其不善者而改之。”</p><p>本题给定甲、乙、丙三个人的能力值关系为：甲的能力值确定是 2 位正整数；把甲的能力值的 2 个数字调换位置就是乙的能力值；甲乙两人能力差是丙的能力值的 X 倍；乙的能力值是丙的 Y 倍。请你指出谁比你强应“从之”，谁比你弱应“改之”。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式：</h4><p>输入在一行中给出三个数，依次为：M（你自己的能力值）、X 和 Y。三个数字均为不超过 1000 的正整数。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式：</h4><p>在一行中首先输出甲的能力值，随后依次输出甲、乙、丙三人与你的关系：如果其比你强，输出 <code>Cong</code>；平等则输出 <code>Ping</code>；比你弱则输出 <code>Gai</code>。其间以 1 个空格分隔，行首尾不得有多余空格。</p><p>注意：如果解不唯一，则以甲的最大解为准进行判断；如果解不存在，则输出 <code>No Solution</code>。</p><h4 id="输入样例-1"><a class="markdownIt-Anchor" href="#输入样例-1"></a> 输入样例 1：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">48</span> <span class="number">3</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><h4 id="输出样例-1"><a class="markdownIt-Anchor" href="#输出样例-1"></a> 输出样例 1：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">48</span> Ping Cong Gai</span><br></pre></td></tr></table></figure><h3 id="输入样例-2"><a class="markdownIt-Anchor" href="#输入样例-2"></a> 输入样例 2：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">48</span> <span class="number">11</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="输出样例-2"><a class="markdownIt-Anchor" href="#输出样例-2"></a> 输出样例 2：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No Solution</span><br></pre></td></tr></table></figure><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码：</h4><p>最开始提交的代码没过测试点4:</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m&lt;num)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; Cong&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m==num)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; Ping&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m&gt;num)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; Gai&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,x,y,a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">99</span>;i&gt;<span class="number">9</span>;i--)&#123;</span><br><span class="line">        a=i;</span><br><span class="line">        <span class="built_in">string</span> str=(to_string(i));</span><br><span class="line">        reverse(str.begin(),str.end()); </span><br><span class="line">        b=stoi(str);  </span><br><span class="line">        <span class="comment">// cout&lt;&lt;typeid(a).name()&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">double</span> c=<span class="built_in">abs</span>(a-b)*<span class="number">1.0</span>/x;</span><br><span class="line">        <span class="keyword">if</span>(b == c*y)&#123;  </span><br><span class="line">           <span class="built_in">cout</span>&lt;&lt;a;</span><br><span class="line">           cmp(m,a);</span><br><span class="line">           cmp(m,b);</span><br><span class="line">           cmp(m,c);</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No Solution&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现cmp函数的参数是整形，改成double就AC了：</p><h4 id="ac"><a class="markdownIt-Anchor" href="#ac"></a> AC:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m,x,y,a,b;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cmp</span><span class="params">(<span class="keyword">double</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m&lt;num)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; Cong&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m==num)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; Ping&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m&gt;num)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; Gai&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">99</span>;i&gt;<span class="number">9</span>;i--)&#123;</span><br><span class="line">        a=i;</span><br><span class="line">        <span class="built_in">string</span> str=(to_string(i));</span><br><span class="line">        reverse(str.begin(),str.end()); </span><br><span class="line">        b=stoi(str);  </span><br><span class="line">        <span class="comment">// cout&lt;&lt;typeid(a).name()&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">double</span> c=<span class="built_in">abs</span>(a-b)*<span class="number">1.0</span>/x;</span><br><span class="line">        <span class="keyword">if</span>(b == c*y)&#123;  </span><br><span class="line">           <span class="built_in">cout</span>&lt;&lt;a;</span><br><span class="line">           cmp(a);</span><br><span class="line">           cmp(b);</span><br><span class="line">           cmp(c);</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No Solution&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;子曰：“三人行，必有我师焉。择其善者而从之，其不善者而改之。”&lt;/p&gt;
&lt;p&gt;本题给定甲、乙、丙三个人的能力值关系为：甲的能力值确定是 2 位正整数；把甲的能力值的 2 个数字调换位置就是乙的能力值；甲乙两人能力差是丙的能力值的 X 倍；乙的能力值是丙的 Y 倍。请你指出谁比你强应“从之”，谁比你弱应“改之”。&lt;/p&gt;
&lt;h4 id=&quot;输入格式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入格式&quot;&gt;&lt;/a&gt; 输入格式：&lt;/h4&gt;
&lt;p&gt;输入在一行中给出三个数，依次为：M（你自己的能力值）、X 和 Y。三个数字均为不超过 1000 的正整数。&lt;/p&gt;
&lt;h4 id=&quot;输出格式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输出格式&quot;&gt;&lt;/a&gt; 输出格式：&lt;/h4&gt;
&lt;p&gt;在一行中首先输出甲的能力值，随后依次输出甲、乙、丙三人与你的关系：如果其比你强，输出 &lt;code&gt;Cong&lt;/code&gt;；平等则输出 &lt;code&gt;Ping&lt;/code&gt;；比你弱则输出 &lt;code&gt;Gai&lt;/code&gt;。其间以 1 个空格分隔，行首尾不得有多余空格。&lt;/p&gt;
&lt;p&gt;注意：如果解不唯一，则以甲的最大解为准进行判断；如果解不存在，则输出 &lt;code&gt;No Solution&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;输入样例-1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入样例-1&quot;&gt;&lt;/a&gt; 输入样例 1：&lt;/h4&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;48&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;输出样例-1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输出样例-1&quot;&gt;&lt;/a&gt; 输出样例 1：&lt;/h4&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;48&lt;/span&gt; Ping Cong Gai&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输入样例-2&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入样例-2&quot;&gt;&lt;/a&gt; 输入样例 2：&lt;/h3&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;48&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例-2&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输出样例-2&quot;&gt;&lt;/a&gt; 输出样例 2：&lt;/h3&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;No Solution&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;代码&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#代码&quot;&gt;&lt;/a&gt; 代码：&lt;/h4&gt;
&lt;p&gt;最开始提交的代码没过测试点4:&lt;/p&gt;</summary>
    
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/categories/PAT-Basic-Level-Practice/"/>
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/tags/PAT-Basic-Level-Practice/"/>
    
  </entry>
  
  <entry>
    <title>PAT_Basic_1087 有多少不同的值</title>
    <link href="https://verasince1997.github.io/2022/02/13/pat_basic/pat_basic_1087/"/>
    <id>https://verasince1997.github.io/2022/02/13/pat_basic/pat_basic_1087/</id>
    <published>2022-02-13T12:46:47.894Z</published>
    <updated>2022-02-15T02:34:21.500Z</updated>
    
    <content type="html"><![CDATA[<p>当自然数 <em>n</em> 依次取 1、2、3、……、<em>N</em> 时，算式 ⌊<em>n</em>/2⌋+⌊<em>n</em>/3⌋+⌊<em>n</em>/5⌋ 有多少个不同的值？（注：⌊<em>x</em>⌋ 为取整函数，表示不超过 <em>x</em> 的最大自然数，即 <em>x</em> 的整数部分。）</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式：</h4><p>输入给出一个正整数 <em>N</em>（2≤<em>N</em>≤104）。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式：</h4><p>在一行中输出题面中算式取到的不同值的个数。</p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span></span><br></pre></td></tr></table></figure><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1480</span></span><br></pre></td></tr></table></figure><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        s.insert(i/<span class="number">2</span>+i/<span class="number">3</span>+i/<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当自然数 &lt;em&gt;n&lt;/em&gt; 依次取 1、2、3、……、&lt;em&gt;N&lt;/em&gt; 时，算式 ⌊&lt;em&gt;n&lt;/em&gt;/2⌋+⌊&lt;em&gt;n&lt;/em&gt;/3⌋+⌊&lt;em&gt;n&lt;/em&gt;/5⌋ 有多少个不同的值？（注：⌊&lt;em&gt;x&lt;/em&gt;⌋ 为取整函数，表示不超过 &lt;em&gt;x&lt;/em&gt;</summary>
      
    
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/categories/PAT-Basic-Level-Practice/"/>
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/tags/PAT-Basic-Level-Practice/"/>
    
  </entry>
  
  <entry>
    <title>PAT_Basic_1086 就不告诉你</title>
    <link href="https://verasince1997.github.io/2022/02/13/pat_basic/pat_basic_1086/"/>
    <id>https://verasince1997.github.io/2022/02/13/pat_basic/pat_basic_1086/</id>
    <published>2022-02-13T12:21:48.271Z</published>
    <updated>2022-02-13T12:31:13.519Z</updated>
    
    <content type="html"><![CDATA[<p>做作业的时候，邻座的小盆友问你：“五乘以七等于多少？”你应该不失礼貌地围笑着告诉他：“五十三。”本题就要求你，对任何一对给定的正整数，倒着输出它们的乘积。</p><p><img src="https://images.ptausercontent.com/0c3a4497-27c3-45ea-9c8e-5a1ab2df48af.jpg" alt="53.jpg"></p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式：</h4><p>输入在第一行给出两个不超过 1000 的正整数 A 和 B，其间以空格分隔。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式：</h4><p>在一行中倒着输出 A 和 B 的乘积。</p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">53</span></span><br></pre></td></tr></table></figure><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路：</h4><p>注意这类测试点：10*10 ，答案应该为 1 而不是 001。</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="built_in">string</span> str=to_string(a*b);</span><br><span class="line">    <span class="comment">//法1:</span></span><br><span class="line">    <span class="comment">// reverse(str.begin(),str.end());</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;stoi(str);</span></span><br><span class="line">    <span class="comment">//法2:</span></span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = str.length()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)&#123;<span class="comment">//100 </span></span><br><span class="line"><span class="keyword">if</span>(cnt || str[i] != <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str[i];</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;做作业的时候，邻座的小盆友问你：“五乘以七等于多少？”你应该不失礼貌地围笑着告诉他：“五十三。”本题就要求你，对任何一对给定的正整数，倒着输出它们的乘积。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.ptausercontent.com/0c3a4497</summary>
      
    
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/categories/PAT-Basic-Level-Practice/"/>
    
    
    <category term="PAT (Basic Level) Practice" scheme="https://verasince1997.github.io/tags/PAT-Basic-Level-Practice/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://verasince1997.github.io/2022/02/13/pat_basic/%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/1085%20&amp;&amp;%201080/"/>
    <id>https://verasince1997.github.io/2022/02/13/pat_basic/%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/1085%20&amp;&amp;%201080/</id>
    <published>2022-02-13T11:56:13.708Z</published>
    <updated>2022-02-13T12:15:14.436Z</updated>
    
    <content type="html"><![CDATA[<p>套路总结：</p><p>善用结构体；收获了题目要求的比较函数写法；map的it-&gt;second可以是结构体形式。<algorithm>头文件的sort函数不能直接对map排序，把map中的元素转移到vector中，这个时候vector的类型一般是结构体，比较函数cmp也是按照结构体的各类元素的关系写的。这两道题好好掌握，以后遇到同类型题，秒杀。</algorithm></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.push_back(Node&#123;x,x,x&#125;);<span class="comment">//注意</span></span><br></pre></td></tr></table></figure><p>1085:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> school;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node a,Node b)</span></span>&#123;<span class="comment">//对map m的排序</span></span><br><span class="line">    <span class="keyword">if</span>(a.score!=b.score)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.score&gt;b.score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.cnt!=b.cnt)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.cnt&lt;b.cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a.school&lt;b.school;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">string</span> id,school;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">unordered_map</span> &lt;<span class="built_in">string</span>,<span class="keyword">double</span>&gt; m;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;m1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;id&gt;&gt;score&gt;&gt;school;</span><br><span class="line">        transform(school.begin(),school.end(),school.begin(),::<span class="built_in">tolower</span>);</span><br><span class="line">        <span class="keyword">if</span>(id[<span class="number">0</span>]==<span class="string">&#x27;T&#x27;</span>)&#123;</span><br><span class="line">            m[school]+=score*<span class="number">1.5</span>;<span class="comment">// m 学校 分数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(id[<span class="number">0</span>]==<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">            m[school]+=score;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(id[<span class="number">0</span>]==<span class="string">&#x27;B&#x27;</span>)&#123;</span><br><span class="line">            m[school]+=score/<span class="number">1.5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        m1[school]++;<span class="comment">//m1 学校 人数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过构造v对m排序 按照value 分数 从大到小</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Node&gt; v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it=m.begin();it!=m.end();it++)&#123;</span><br><span class="line">        v.push_back(Node&#123;it-&gt;first, (<span class="keyword">int</span>)m[it-&gt;first], m1[it-&gt;first]&#125;);<span class="comment">//学校名 总分 人数</span></span><br><span class="line">    &#125;</span><br><span class="line">    sort(v.begin(),v.end(),cmp);</span><br><span class="line">    <span class="comment">//输出模块</span></span><br><span class="line">    <span class="keyword">int</span> rank = <span class="number">0</span>, pres = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="keyword">int</span>)v.size());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pres != v[i].score) rank = i + <span class="number">1</span>;</span><br><span class="line">        pres = v[i].score;<span class="comment">//for循环 i++后 pres和下一个ans[i]总分相等 则rank不变 不等 则rank+1</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, rank);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v[i].school;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %d %d\n&quot;</span>, v[i].score, v[i].cnt);<span class="comment">// tws总分 ns人数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1080:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">grade</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> gp = <span class="number">-1</span>, gm = <span class="number">-1</span>, gf = <span class="number">-1</span>, g;<span class="comment">//注意初始化</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> id;</span><br><span class="line">    <span class="keyword">int</span> gp,gm,gf,g;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node a,Node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.g!=b.g)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.g&gt;b.g;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.id&lt;b.id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span> &lt;<span class="built_in">string</span>,struct grade&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p,m,n;</span><br><span class="line">    <span class="built_in">string</span> id;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;ids;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;p&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;id&gt;&gt;mp[id].gp;</span><br><span class="line">        ids.insert(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;id&gt;&gt;mp[id].gm;</span><br><span class="line">        ids.insert(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;id&gt;&gt;mp[id].gf;</span><br><span class="line">        ids.insert(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it=ids.begin();it!=ids.end();it++)&#123;</span><br><span class="line">        <span class="comment">//计算总评成绩</span></span><br><span class="line">        <span class="keyword">if</span>(mp[*it].gm &gt; mp[*it].gf)&#123;</span><br><span class="line">            mp[*it].g=round(mp[*it].gm*<span class="number">0.4</span>+mp[*it].gf*<span class="number">0.6</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            mp[*it].g=mp[*it].gf;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//转移到vector中以排序</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Node&gt; v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it=mp.begin();it!=mp.end();it++)&#123;</span><br><span class="line">        v.push_back(Node&#123;it-&gt;first, mp[it-&gt;first].gp, mp[it-&gt;first].gm,</span><br><span class="line">        mp[it-&gt;first].gf,mp[it-&gt;first].g&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v.begin(),v.end(),cmp);</span><br><span class="line">    <span class="comment">//输出模块</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.size();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[i].g&gt;=<span class="number">60</span> &amp;&amp; v[i].gp&gt;=<span class="number">200</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;v[i].id&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;v[i].gp&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;v[i].gm&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;v[i].gf&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;v[i].g&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;套路总结：&lt;/p&gt;
&lt;p&gt;善用结构体；收获了题目要求的比较函数写法；map的it-&amp;gt;second可以是结构体形式。&lt;algorithm&gt;头文件的sort函数不能直接对map排序，把map中的元素转移到vector中，这个时候vector的类型一般是结构体，比较函数cm</summary>
      
    
    
    
    
  </entry>
  
</feed>
